["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___82802 = arguments.length;\nvar i__4772__auto___82803 = (0);\nwhile(true){\nif((i__4772__auto___82803 < len__4771__auto___82802)){\nargs__4777__auto__.push((arguments[i__4772__auto___82803]));\n\nvar G__82804 = (i__4772__auto___82803 + (1));\ni__4772__auto___82803 = G__82804;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((0) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4778__auto__);\n});\n\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__82766){\nvar map__82767 = p__82766;\nvar map__82767__$1 = cljs.core.__destructure_map(map__82767);\nvar m = map__82767__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__82767__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__82767__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__82767__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5751__auto___82812 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5751__auto___82812){\nvar unknown_keys_82813 = temp__5751__auto___82812;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_82813], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4160__auto__ = id;\nif(cljs.core.truth_(or__4160__auto__)){\nreturn or__4160__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n}));\n\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq82765){\nvar self__4759__auto__ = this;\nreturn self__4759__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq82765));\n}));\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__82769 = arguments.length;\nswitch (G__82769) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n}));\n\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___82815 = arguments.length;\nvar i__4772__auto___82816 = (0);\nwhile(true){\nif((i__4772__auto___82816 < len__4771__auto___82815)){\nargs__4777__auto__.push((arguments[i__4772__auto___82816]));\n\nvar G__82817 = (i__4772__auto___82816 + (1));\ni__4772__auto___82816 = G__82817;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((3) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4778__auto__);\n});\n\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq82770){\nvar G__82771 = cljs.core.first(seq82770);\nvar seq82770__$1 = cljs.core.next(seq82770);\nvar G__82772 = cljs.core.first(seq82770__$1);\nvar seq82770__$2 = cljs.core.next(seq82770__$1);\nvar G__82773 = cljs.core.first(seq82770__$2);\nvar seq82770__$3 = cljs.core.next(seq82770__$2);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__82771,G__82772,G__82773,seq82770__$3);\n}));\n\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__82775 = arguments.length;\nswitch (G__82775) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n}));\n\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___82821 = arguments.length;\nvar i__4772__auto___82822 = (0);\nwhile(true){\nif((i__4772__auto___82822 < len__4771__auto___82821)){\nargs__4777__auto__.push((arguments[i__4772__auto___82822]));\n\nvar G__82824 = (i__4772__auto___82822 + (1));\ni__4772__auto___82822 = G__82824;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((3) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4778__auto__);\n});\n\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n}));\n\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq82778){\nvar G__82779 = cljs.core.first(seq82778);\nvar seq82778__$1 = cljs.core.next(seq82778);\nvar G__82780 = cljs.core.first(seq82778__$1);\nvar seq82778__$2 = cljs.core.next(seq82778__$1);\nvar G__82781 = cljs.core.first(seq82778__$2);\nvar seq82778__$3 = cljs.core.next(seq82778__$2);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__82779,G__82780,G__82781,seq82778__$3);\n}));\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar f = temp__5751__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while its `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__82829 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__82829;\ncontinue;\n}\nbreak;\n}\n});\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__82801 = arguments.length;\nswitch (G__82801) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\n}));\n\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n}));\n\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of interceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat analogous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__82630__auto___82835 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__82630__auto___82835);\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^Q","~$re-frame.interop","^R","~$re-frame.trace","^S","~$trace","^S","~$clojure.set","^U","~$set","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$console","^Q","~$empty-queue","^R","~$debug-enabled?","^R"],"~:require-macros",["^ ","^S","^S","^T","^S","^W","^W"],"~:form",["~#list",["~$ns","^L",["^15",["^Z",["^Q","~:refer",["^10"]],["^R","^17",["^11","^12"]],["^S","~:as","^T","~:include-macros",true],["^U","^18","^V"]]]]],"~:flags",["^ ","^Z",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1626505520002,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__82766","map__82767","cljs.core/--destructure-map","cljs.core.get","seq82765","self__4759__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5751__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4160__auto__","G__82769","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq82770","G__82771","cljs.core/first","cljs.core/next","G__82772","G__82773","self__4758__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__82775","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq82778","G__82779","G__82780","G__82781","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__82801","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__82630__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^J",["~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.interceptor/assoc-coeffect","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.interop/debug-enabled?","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1>","reagent/impl/batching.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^X","^W","~$reagent.debug","~$reagent.impl.util"]]],["^1>","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.dom.HtmlElement"]]],["^1>","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.labs.userAgent.util","~$goog.string"]]],["^1>","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.array","~$goog.asserts"]]],["^1>","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1>","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2M","~$goog.object","~$goog.string.internal"]]],["^1>","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2T"]]],["^1>","re_frame/loggers.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^U"]]],["^1>","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P"]]],["^1>","reagent/impl/util.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","~$clojure.string","~$clojure.walk","^2S","^2J"]]],["^1>","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2M","~$goog.reflect","^2N"]]],["^1>","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2Q","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1>","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2R"]]],["^1>","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","reagent/ratom.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^2K","^2J","~$reagent.impl.batching","^U","^2S"]]],["^1>","re_frame/interop.cljs"],["b153aa5637718f7ef415049480b003bb00fd359b","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1>","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.disposable.IDisposable"]]],["^1>","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1>","shadow/js.js"],["cf0f0b0b78819e6f54388955752d9242b3eae701","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","reagent/impl/template.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^?","^2[","^2K","~$reagent.impl.component","^39","~$reagent.impl.input","~$reagent.impl.protocols","^3=","^2J","^2S"]]],["^1>","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P"]]],"~:SHADOW-TIMESTAMP",[1621409642000,1621409642000,1620991109000],["^3?","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^3@","~$module$node_modules$object_assign$index"]]],["^1>","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","^34"]]],["^1>","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.events.ListenableKey"]]],["^1>","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","~$goog.html.trustedtypes","^2W","^2X","^2Y","^2Z"]]],["^1>","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","~$goog.events.Listener","^2S"]]],["^1>","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","~$goog.html.SafeUrl","^2Y","^2Z","^2T"]]],["^1>","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3K","^2V","~$goog.html.uncheckedconversions","^2Y","^2T"]]],["^1>","reagent/impl/component.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^2S","^?","^2K","^39","^3E","^3=","^2J"]]],["^1>","clojure/walk.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W"]]],["^1>","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1>","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","~$goog.dom.TagName","~$goog.dom.tags","^3O","^3P","~$goog.html.SafeStyleSheet","^3K","^2V","^3I","^2W","^2X","^31","^2S","^2Y","^2Z","^2T"]]],["^1>","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2S"]]],["^1>","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2M","^2N"]]],["^1>","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^3T","~$goog.dom.safe","^3N","^3Q","~$goog.math.Coordinate","~$goog.math.Size","^2S","^2N","~$goog.string.Unicode","^2R"]]],["^1>","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.debug.Error","^3X"]]],["^1>","reagent/impl/protocols.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W"]]],["^1>","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","^2N","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^3?","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","519ffd5a4c91b67302cc9947b794966d629860cd","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^3@"]]],["^1>","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",[]]],["^1>","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2S"]]],["^1>","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^2N","~$goog.string.StringBuffer"]]],["^3?","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","6093d43b27c84de58b9ce55e3a930469339c9e54","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^3@","^3G"]]],["^1>","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P"]]],["^1>","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^3Y","^3Q","^2Y","^2T"]]],["^1>","re_frame/interceptor.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^Q","^R","^S","^U"]]],["^1>","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2T"]]],["^1>","reagent/core.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^?","~$reagent.impl.template","^3C","^2K","^39","^3E","^3=","^2J"]]],["^1>","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","~$goog.debug.errorcontext","^2R"]]],["^1>","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.math"]]],["^1>","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","^3M","^4:"]]],["^1>","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^35","~$goog.dom","^3T","^3Y","^3M","^3N","^2V","^31","^32","^2Y"]]],["^1>","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","^3N","^3O","^3P","^3V","^3K","^2V","^2Y","^2T"]]],["^1>","reagent/impl/input.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^3C","^39","^3E"]]],["^1>","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.Disposable","~$goog.events.EventId"]]],["^1>","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X"]]],["^1>","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.math.Long","~$goog.math.Integer","^2N","^2S","^2O","~$goog.Uri","^47"]]],["^1>","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","^3I","^2Y","^2Z"]]],["^1>","reagent/debug.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W"]]],["^1>","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","^3P","^2S","^2Y","^2Z","^2T"]]],["^1>","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","~$goog.debug","^2Q","~$goog.events.Event","~$goog.events.EventType","^34","^2R"]]],["^1>","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^34"]]],["^1>","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2R"]]],["^1>","clojure/set.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W"]]],["^1>","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2O","^2P","^2N"]]],["^1>","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^2P","^2Z"]]],["^1>","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^4="]]],["^1>","re_frame/trace.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2F",["^ ","^2G",null,"^2H",["^J",[]],"^2I",["^X","^W","^R","^Q","^3M"]]]]],"~:clj-info",["^ ","jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1620986767000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/core.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/interop.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1615061596000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1596475466000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/ratom.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/trace.cljc",1620893892000,"jar:file:/Users/lcerveau/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/interop.clj",1620893892000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/debug.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1620991109000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^T","^S","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^J",["^Z"]],"~:shadow/js-access-global",["^J",["Error"]],"^[",["^ ","^10","^Q","^11","^R","^12","^R"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^15",["~$quote",["^15",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^15",["^5B","^5C","~$f","^5D"]]],"^5@",["^15",[["^5B","^5C","~$f","~$&","^5D"]]],"~:arglists-meta",["^15",[null]]]],"^K","^1T","^6","re_frame/interceptor.cljc","^:",20,"^5E",["^ ","^5F",true,"^5G",3,"^5H",3,"^5I",[["^15",["^5B","^5C","~$f","^5D"]]],"^5@",["^15",[["^5B","^5C","~$f","~$&","^5D"]]],"^5J",["^15",[null]]],"^5I",[["^15",["^5B","^5C","~$f","^5D"]]],"~:protocol-impl",null,"^5G",3,"^5J",["^15",[null]],"^8",1,"^5F",true,"~:methods",[["^ ","^5G",3,"^5F",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^5N","^9",42,"^5H",3,"~:fn-var",true,"^5@",["^15",[["^5B","^5C","~$f","~$&","^5D"]]]],"~$invoke-interceptors",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5@",["^15",["^5A",["^15",[["^5B","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^5R",true,"^K","^1V","^6","re_frame/interceptor.cljc","^:",27,"^5I",["^15",[["^5B","^5S"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",74,"^9",74,"^5H",2,"^5P",true,"^5@",["^15",["^5A",["^15",[["^5B","^5S"]]]]],"^5T","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5@",["^15",["^5A",["^15",[["^5B","^5C","~$value"]]]]]],"^K","^26","^6","re_frame/interceptor.cljc","^:",21,"^5I",["^15",[["^5B","^5C","^5V"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",56,"^5O",["^J",["~$clj","^5N"]],"^9",56,"^5H",3,"^5P",true,"^5@",["^15",["^5A",["^15",[["^5B","^5C","^5V"]]]]]],"~$update-coeffect",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5@",["^15",["^5A",["^15",[["^5B","^5C","~$f","~$&","^5D"]]]]],"^5E",["^ ","^5F",true,"^5G",3,"^5H",3,"^5I",[["^15",["^5B","^5C","~$f","^5D"]]],"^5@",["^15",[["^5B","^5C","~$f","~$&","^5D"]]],"^5J",["^15",[null]]]],"^K","^24","^6","re_frame/interceptor.cljc","^:",22,"^5E",["^ ","^5F",true,"^5G",3,"^5H",3,"^5I",[["^15",["^5B","^5C","~$f","^5D"]]],"^5@",["^15",[["^5B","^5C","~$f","~$&","^5D"]]],"^5J",["^15",[null]]],"^5I",[["^15",["^5B","^5C","~$f","^5D"]]],"^5K",null,"^5G",3,"^5J",["^15",[null]],"^8",1,"^5F",true,"^5L",[["^ ","^5G",3,"^5F",true,"^5M","^5N"]],"^7",60,"^5O","^5N","^9",60,"^5H",3,"^5P",true,"^5@",["^15",[["^5B","^5C","~$f","~$&","^5D"]]]],"~$invoke-interceptor-fn",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^5R",true,"^5@",["^15",["^5A",["^15",[["^5B","~$interceptor","^5S"]]]]]],"^5R",true,"^K","^2A","^6","re_frame/interceptor.cljc","^:",29,"^5I",["^15",[["^5B","^5Z","^5S"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",67,"^5O",["^J",[null,"^5N"]],"^9",67,"^5H",3,"^5P",true,"^5@",["^15",["^5A",["^15",[["^5B","^5Z","^5S"]]]]]],"~$get-effect",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5@",["^15",["^5A",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","~$not-found"]]]]],"^5E",["^ ","^5F",false,"^5G",3,"^5H",3,"^5I",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]],"^5@",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]],"^5J",["^15",[null,null,null]]]],"^K","^1K","^6","re_frame/interceptor.cljc","^:",17,"^5E",["^ ","^5F",false,"^5G",3,"^5H",3,"^5I",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]],"^5@",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]],"^5J",["^15",[null,null,null]]],"^5I",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]],"^5K",null,"^5G",3,"^5J",["^15",[null,null,null]],"^8",1,"^5F",false,"^5L",[["^ ","^5G",1,"^5F",false,"^5M","^5N"],["^ ","^5G",2,"^5F",false,"^5M",["^J",[null,"^5N"]]],["^ ","^5G",3,"^5F",false,"^5M",["^J",[null,"^5N"]]]],"^7",30,"^9",30,"^5H",3,"^5P",true,"^5@",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]]],"~$->interceptor",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5@",["^15",["^5A",["^15",[["~$&",["^ ","^18","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5E",["^ ","^5F",true,"^5G",0,"^5H",0,"^5I",[["^15",[["^ ","^18","~$m","^62",["^63","^64","^65"]]]]],"^5@",["^15",[["~$&",["^ ","^18","~$m","^62",["^63","^64","^65"]]]]],"^5J",["^15",[null]]]],"^K","^1O","^6","re_frame/interceptor.cljc","^:",20,"^5E",["^ ","^5F",true,"^5G",0,"^5H",0,"^5I",[["^15",[["^ ","^18","~$m","^62",["^63","^64","^65"]]]]],"^5@",["^15",[["~$&",["^ ","^18","~$m","^62",["^63","^64","^65"]]]]],"^5J",["^15",[null]]],"^5I",[["^15",[["^ ","^18","~$m","^62",["^63","^64","^65"]]]]],"^5K",null,"^5G",0,"^5J",["^15",[null]],"^8",1,"^5F",true,"^5L",[["^ ","^5G",0,"^5F",true,"^5M","~$cljs.core/IMap"]],"^7",17,"^5O","^5N","^9",17,"^5H",0,"^5P",true,"^5@",["^15",[["~$&",["^ ","^18","~$m","^62",["^63","^64","^65"]]]]]],"~$get-coeffect",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5@",["^15",["^5A",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]]]],"^5E",["^ ","^5F",false,"^5G",3,"^5H",3,"^5I",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]],"^5@",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]],"^5J",["^15",[null,null,null]]]],"^K","^29","^6","re_frame/interceptor.cljc","^:",19,"^5E",["^ ","^5F",false,"^5G",3,"^5H",3,"^5I",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]],"^5@",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]],"^5J",["^15",[null,null,null]]],"^5I",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]],"^5K",null,"^5G",3,"^5J",["^15",[null,null,null]],"^8",1,"^5F",false,"^5L",[["^ ","^5G",1,"^5F",false,"^5M","^5N"],["^ ","^5G",2,"^5F",false,"^5M",["^J",[null,"^5N"]]],["^ ","^5G",3,"^5F",false,"^5M",["^J",[null,"^5N"]]]],"^7",48,"^9",48,"^5H",3,"^5P",true,"^5@",["^15",[["^5B"],["^5B","^5C"],["^5B","^5C","^60"]]]],"~$execute",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5@",["^15",["^5A",["^15",[["~$event-v","~$interceptors"]]]]],"^5T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^K","^1N","^6","re_frame/interceptor.cljc","^:",14,"^5I",["^15",[["^69","^6:"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",146,"^5O","^5N","^9",146,"^5H",2,"^5P",true,"^5@",["^15",["^5A",["^15",[["^69","^6:"]]]]],"^5T","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5@",["^15",["^5A",["^15",[["^5B","^5C","^5V"]]]]]],"^K","^2;","^6","re_frame/interceptor.cljc","^:",19,"^5I",["^15",[["^5B","^5C","^5V"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",38,"^5O",["^J",["^5W","^5N"]],"^9",38,"^5H",3,"^5P",true,"^5@",["^15",["^5A",["^15",[["^5B","^5C","^5V"]]]]]],"~$enqueue",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5@",["^15",["^5A",["^15",[["^5B","^6:"]]]]]],"^K","^1Y","^6","re_frame/interceptor.cljc","^:",14,"^5I",["^15",[["^5B","^6:"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",111,"^5O",["^J",["^5W","^5N"]],"^9",111,"^5H",2,"^5P",true,"^5@",["^15",["^5A",["^15",[["^5B","^6:"]]]]]],"~$mandatory-interceptor-keys",["^ ","^K","^2C","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^5M","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5@",["^15",["^5A",["^15",[["~$m"]]]]]],"^K","^2<","^6","re_frame/interceptor.cljc","^:",19,"^5I",["^15",[["~$m"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",11,"^5O","~$boolean","^9",11,"^5H",1,"^5P",true,"^5@",["^15",["^5A",["^15",[["~$m"]]]]]],"~$change-direction",["^ ","^5?",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^5R",true,"^5@",["^15",["^5A",["^15",[["^5B"]]]]],"^5T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5R",true,"^K","^27","^6","re_frame/interceptor.cljc","^:",24,"^5I",["^15",[["^5B"]]],"^5K",null,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^7",132,"^5O",["^J",["^5W","^5N"]],"^9",132,"^5H",1,"^5P",true,"^5@",["^15",["^5A",["^15",[["^5B"]]]]],"^5T","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5B",["^ ","^5?",null,"^5",["^ ","^5R",true,"^6","re_frame/interceptor.cljc","^:",15,"^5E",["^ ","^5F",false,"^5G",3,"^5H",3,"^5I",[["~$event","^6:"],["^6B","^6:","~$db"]],"^5@",["^15",[["^6B","^6:"],["^6B","^6:","^6C"]]],"^5J",["^15",[null,null]]],"^8",8,"^7",118,"^9",118,"^5@",["^15",["^5A",["^15",[["^6B","^6:"],["^6B","^6:","^6C"]]]]],"^5T","Create a fresh context"],"^5R",true,"^K","^1J","^6","re_frame/interceptor.cljc","^:",15,"^5E",["^ ","^5F",false,"^5G",3,"^5H",3,"^5I",[["^6B","^6:"],["^6B","^6:","^6C"]],"^5@",["^15",[["^6B","^6:"],["^6B","^6:","^6C"]]],"^5J",["^15",[null,null]]],"^5I",[["^6B","^6:"],["^6B","^6:","^6C"]],"^5K",null,"^5G",3,"^5J",["^15",[null,null]],"^8",1,"^5F",false,"^5L",[["^ ","^5G",2,"^5F",false,"^5M",["^J",["^5W","^5N"]]],["^ ","^5G",3,"^5F",false,"^5M",["^J",["^5W","^5N"]]]],"^7",118,"^9",118,"^5H",3,"^5P",true,"^5@",["^15",[["^6B","^6:"],["^6B","^6:","^6C"]]],"^5T","Create a fresh context"]],"^13",["^ ","^S","^S","^T","^S","^W","^W"],"~:cljs.analyzer/constants",["^ ","^Y",["^J",["~:unnamed","~:tags","~:original-event","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6K","^6L","^6R","^6O","^6E","^6M","^6P","^6I","^6N","^6J","^6G","^6H","^6F","^6Q"]],"^1:",["^ ","^Z",["^J",[]]],"^1;",["^ "],"^1<",["^X","^W","^Q","^R","^S","^U"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2E",[["^6V","~:static-fns"],true,["^6V","~:shadow-tweaks"],null,["^6V","~:source-map-inline"],null,["^6V","~:elide-asserts"],false,["^6V","~:optimize-constants"],null,["^6V","^1A"],null,["^6V","~:external-config"],null,["^6V","~:tooling-config"],null,["^6V","~:emit-constants"],null,["^6V","~:load-tests"],null,["^6V","~:form-size-threshold"],null,["^6V","~:data-readers"],null,["^6V","~:infer-externs"],"~:auto",["^6V","^1C"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6V","~:fn-invoke-direct"],null,["^6V","~:source-map"],"/dev/null"]]]