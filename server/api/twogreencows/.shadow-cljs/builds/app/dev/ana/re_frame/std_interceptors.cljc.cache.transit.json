["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\n\nreturn context;\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\n} else {\nvar vec__82922_83167 = clojure.data.diff(orig_db,new_db);\nvar only_before_83168 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__82922_83167,(0),null);\nvar only_after_83169 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__82922_83167,(1),null);\nvar db_changed_QMARK__83170 = (((!((only_before_83168 == null)))) || ((!((only_after_83169 == null)))));\nif(db_changed_QMARK__83170){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_83168], 0));\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_83169], 0));\n\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\n} else {\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\n}\n}\n\nreturn context;\n})], 0));\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\nvar vec__82926 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__82926,(0),null);\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__82926,(1),null);\nvar event = vec__82926;\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \",event], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\n\nreturn context;\n} else {\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\n}\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\n})], 0));\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n * \n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\n * \n *    (fn [db event]\n *       ....)\n * \n *   So, the interceptor wraps the given handler:\n *   1. extracts two `:coeffects` keys: db and event\n *   2. calls handler-fn\n *   3. stores the db result back into context's `:effects`\n */\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__83022 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__83023 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__83023);\n\ntry{try{var map__83028 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__83028__$1 = cljs.core.__destructure_map(map__83028);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83028__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83028__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__82628__auto___83171 = re_frame.interop.now();\nvar duration__82629__auto___83172 = (end__82628__auto___83171 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__82629__auto___83172,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__82628__auto___83171);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__83022);\n}})():(function (){var map__83033 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__83033__$1 = cljs.core.__destructure_map(map__83033);\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83033__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83033__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__82630__auto___83173 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__82630__auto___83173);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n * \n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n * \n *    (fn [coeffects event]\n *       {:db ...\n *        :dispatch ...})\n * \n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n *   1. extracts `:coeffects`\n *   2. call handler-fn giving coeffects\n *   3. stores the result back into the `:effects`\n */\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__83038 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__83039 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__83039);\n\ntry{try{var map__83044 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__83044__$1 = cljs.core.__destructure_map(map__83044);\nvar coeffects = map__83044__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83044__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__82628__auto___83174 = re_frame.interop.now();\nvar duration__82629__auto___83175 = (end__82628__auto___83174 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__82629__auto___83175,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__82628__auto___83174);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__83038);\n}})():(function (){var map__83045 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\nvar map__83045__$1 = cljs.core.__destructure_map(map__83045);\nvar coeffects = map__83045__$1;\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__83045__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\n})());\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__82630__auto___83176 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__82630__auto___83176);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\n/**\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\n *   Example:\n * \n *    (fn [context]\n *       (enqueue context [more interceptors]))\n */\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__83134 = re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__83135 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__83135);\n\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__82628__auto___83177 = re_frame.interop.now();\nvar duration__82629__auto___83178 = (end__82628__auto___83177 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__82629__auto___83178,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\n\nre_frame.trace.run_tracing_callbacks_BANG_(end__82628__auto___83177);\n} else {\n}\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__83134);\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__82630__auto___83179 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__82630__auto___83179);\n\n} else {\n}\n\nreturn new_context;\n})], 0));\n});\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___83180 = arguments.length;\nvar i__4772__auto___83181 = (0);\nwhile(true){\nif((i__4772__auto___83181 < len__4771__auto___83180)){\nargs__4777__auto__.push((arguments[i__4772__auto___83181]));\n\nvar G__83182 = (i__4772__auto___83181 + (1));\ni__4772__auto___83181 = G__83182;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((0) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((0)),(0),null)):null);\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__4778__auto__);\n});\n\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\nvar path = cljs.core.flatten(args);\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\nif(cljs.core.empty_QMARK_(path)){\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\n} else {\n}\n\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\nvar original_db = cljs.core.peek(db_store);\nvar new_db_store = cljs.core.pop(db_store);\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\nreturn context_SINGLEQUOTE_;\n} else {\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq83136){\nvar self__4759__auto__ = this;\nreturn self__4759__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq83136));\n}));\n\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event)));\n})], 0));\n});\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\n\nreturn context;\n})], 0));\n});\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\nvar args__4777__auto__ = [];\nvar len__4771__auto___83185 = arguments.length;\nvar i__4772__auto___83186 = (0);\nwhile(true){\nif((i__4772__auto___83186 < len__4771__auto___83185)){\nargs__4777__auto__.push((arguments[i__4772__auto___83186]));\n\nvar G__83187 = (i__4772__auto___83186 + (1));\ni__4772__auto___83186 = G__83187;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4778__auto__ = ((((2) < args__4777__auto__.length))?(new cljs.core.IndexedSeq(args__4777__auto__.slice((2)),(0),null)):null);\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4778__auto__);\n});\n\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__83161_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__83161_SHARP_);\n}),in_paths);\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__83162_SHARP_){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__83162_SHARP_);\n}),in_paths);\nvar changed_ins_QMARK_ = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins)):false);\nif(cljs.core.truth_(changed_ins_QMARK_)){\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\n} else {\nreturn context;\n}\n})], 0));\n}));\n\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq83163){\nvar G__83164 = cljs.core.first(seq83163);\nvar seq83163__$1 = cljs.core.next(seq83163);\nvar G__83165 = cljs.core.first(seq83163__$1);\nvar seq83163__$2 = cljs.core.next(seq83163__$1);\nvar self__4758__auto__ = this;\nreturn self__4758__auto__.cljs$core$IFn$_invoke$arity$variadic(G__83164,G__83165,seq83163__$2);\n}));\n\n/**\n * An interceptor which adds registered global interceptors to the context's queue.\n * \n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\n */\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__83166_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__83166_SHARP_);\n}));\n})], 0));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^T","~$data","~$clojure.data","~$re-frame.trace","^W","~$re-frame.settings","^X","~$cljs.core","^Y","~$interceptor","^T","~$goog","^[","~$trace","^W","~$re-frame.utils","^11","~$settings","^X","~$re-frame.loggers","^13","~$utils","^11","^S","^S","^V","^V","~$re-frame.db","^15"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$->interceptor","^T","~$get-effect","^T","~$get-coeffect","^T","~$assoc-coeffect","^T","~$assoc-effect","^T","~$update-coeffect","^T","~$console","^13","~$app-db","^15"],"~:require-macros",["^ ","^W","^W","^10","^W","^Y","^Y"],"~:form",["~#list",["~$ns","^M","contains re-frame supplied, standard interceptors",["^1C",["^17",["^T","~:refer",["^19","^1:","^1;","^1<","^1=","^1>"]],["^13","^1E",["^1?"]],["^X","~:as","^12"],["^15","^1E",["^1@"]],["^V","^1F","^U"],["^S","^1F","^R"],["^11","^1F","^14"],["^W","^1F","^10","~:include-macros",true],["^T","^1F","^Z"]]]]],"~:flags",["^ ","^17",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^[","^Y","^T","^13","^X","^15","^V","^S","^11","^W"]],"^O","^M","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1626505520567,"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def unwrap\n  (->interceptor\n    :id      :unwrap\n    :before  (fn unwrap-before\n               [context]\n               (let [[_ payload :as event] (get-coeffect context :event)]\n                 (if-not (and (= 2 (count event))\n                              (map? payload))\n                   (do\n                     (console :warn \"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \" event)\n                     context)\n                   (assoc-coeffect context :event payload))))\n    :after   (fn unwrap-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trim-v-before\n               [context]\n               (if-not (vector? (get-coeffect context :event))\n                 (do\n                   (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                   context)\n                 (update-coeffect context :event subvec 1)))\n    :after   (fn trim-v-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n(->interceptor\n  :id     :fx-handler\n  :before (fn fx-handler-before\n            [context]\n            (let [new-context\n                  (trace/with-trace\n                    {:op-type   :event/handler\n                     :operation (get-coeffect context :original-event)}\n                    (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                      (->> (handler-fn coeffects event)\n                           (assoc context :effects))))]\n              (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n              new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event (get-coeffect context :event)\n                   db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                           (get-coeffect context :db))]\n               (->> (f db event)\n                    (assoc-effect context :db))))))\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__82922","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__82926","_","payload","cljs.core/count","cljs.core/map?","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__83022","re-frame.trace/*current-trace*","*current-trace*-temp-val__83023","re-frame.trace/start-trace","end__82628__auto__","re-frame.interop/now","duration__82629__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__83028","cljs.core/--destructure-map","cljs.core.get","map__83033","db","re-frame.interceptor/assoc-effect","new-trace__82630__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__83038","*current-trace*-temp-val__83039","map__83044","map__83045","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__83134","*current-trace*-temp-val__83135","var_args","args__4777__auto__","len__4771__auto__","i__4772__auto__","argseq__4778__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq83136","self__4759__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","cljs.core/contains?","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq83163","G__83164","cljs.core/first","cljs.core/next","G__83165","self__4758__auto__","out-path","in-paths","old-db","new-ins","p1__83161#","cljs.core.map","old-ins","p1__83162#","changed-ins?","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__83166#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^K",["~$cljs.core/vector?","~$cljs.core/=","~$re-frame.std-interceptors/debug","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$re-frame.std-interceptors/trim-v","~$cljs.core/empty?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$re-frame.std-interceptors/enrich","~$re-frame.std-interceptors/ctx-handler->interceptor","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type"]]],"~:cache-keys",["~#cmap",[["^1L","reagent/impl/batching.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^[","^Y","~$reagent.debug","~$reagent.impl.util"]]],["^1L","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.dom.HtmlElement"]]],["^1L","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.labs.userAgent.util","~$goog.string"]]],["^1L","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.array","~$goog.asserts"]]],["^1L","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1L","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2X","~$goog.object","~$goog.string.internal"]]],["^1L","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^33"]]],["^1L","re_frame/loggers.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","~$clojure.set"]]],["^1L","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2["]]],["^1L","reagent/impl/util.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","~$clojure.string","~$clojure.walk","^32","^2U"]]],["^1L","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2X","~$goog.reflect","^2Y"]]],["^1L","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^30","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1L","re_frame/registrar.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","~$re-frame.interop","^13","^X"]]],["^1L","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^31"]]],["^1L","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","reagent/ratom.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^2V","^2U","~$reagent.impl.batching","^3:","^32"]]],["^1L","re_frame/interop.cljs"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1L","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.disposable.IDisposable"]]],["^1L","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1L","shadow/js.js"],["cf0f0b0b78819e6f54388955752d9242b3eae701","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","reagent/impl/template.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^@","^3;","^2V","~$reagent.impl.component","^3F","~$reagent.impl.input","~$reagent.impl.protocols","^3J","^2U","^32"]]],["^1L","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2["]]],"~:SHADOW-TIMESTAMP",[1621409642000,1621409642000,1620991109000],["^3L","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","2d5bc5b3fb2e19279e31e634b0695b1fd96a54f3","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^3M","~$module$node_modules$object_assign$index"]]],["^1L","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","^3@"]]],["^1L","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.events.ListenableKey"]]],["^1L","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","~$goog.html.trustedtypes","^36","^37","^38","^39"]]],["^1L","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","~$goog.events.Listener","^32"]]],["^1L","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","~$goog.html.SafeUrl","^38","^39","^33"]]],["^1L","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^3X","^35","~$goog.html.uncheckedconversions","^38","^33"]]],["^1L","reagent/impl/component.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^32","^@","^2V","^3F","^3R","^3J","^2U"]]],["^1L","clojure/walk.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y"]]],["^1L","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1L","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","~$goog.dom.TagName","~$goog.dom.tags","^40","^41","~$goog.html.SafeStyleSheet","^3X","^35","^3V","^36","^37","^3=","^32","^38","^39","^33"]]],["^1L","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^32"]]],["^1L","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2X","^2Y"]]],["^1L","re_frame/settings.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^3E","^13"]]],["^1L","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^45","~$goog.dom.safe","^3[","^42","~$goog.math.Coordinate","~$goog.math.Size","^32","^2Y","~$goog.string.Unicode","^31"]]],["^1L","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.debug.Error","^49"]]],["^1L","reagent/impl/protocols.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y"]]],["^1L","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","^2Y","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1L","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^3L","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","519ffd5a4c91b67302cc9947b794966d629860cd","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^3M"]]],["^1L","re_frame/db.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^3E"]]],["^1L","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",[]]],["^1L","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^32"]]],["^1L","clojure/string.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^2Y","~$goog.string.StringBuffer"]]],["^1L","re_frame/cofx.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^15","^T","~$re-frame.registrar","^13"]]],["^3L","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","42b9e7b7183490d3c1def6c7e906fed1824435eb","6093d43b27c84de58b9ce55e3a930469339c9e54","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^3M","^3T"]]],["^1L","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2["]]],["^1L","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^4:","^42","^38","^33"]]],["^1L","re_frame/interceptor.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^13","^3E","^W","^3:"]]],["^1L","clojure/data.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^3:"]]],["^1L","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^33"]]],["^1L","reagent/core.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^@","~$reagent.impl.template","^3P","^2V","^3F","^3R","^3J","^2U"]]],["^1L","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","~$goog.debug.errorcontext","^31"]]],["^1L","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.math"]]],["^1L","re_frame/std_interceptors.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^T","^13","^X","^15","^V","^S","^11","^W"]]],["^1L","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","^3Z","^4H"]]],["^1L","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^3A","~$goog.dom","^45","^4:","^3Z","^3[","^35","^3=","^3>","^38"]]],["^1L","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","^3[","^40","^41","^47","^3X","^35","^38","^33"]]],["^1L","re_frame/utils.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^13"]]],["^1L","reagent/impl/input.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^3P","^3F","^3R"]]],["^1L","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.Disposable","~$goog.events.EventId"]]],["^1L","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^["]]],["^1L","cljs/core.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.math.Long","~$goog.math.Integer","^2Y","^32","^2Z","~$goog.Uri","^4D"]]],["^1L","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","^3V","^38","^39"]]],["^1L","reagent/debug.cljs"],["a1dd4d40425bb2e1afad0fe72780b43ff394ccfa","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y"]]],["^1L","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","^41","^32","^38","^39","^33"]]],["^1L","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","~$goog.debug","^30","~$goog.events.Event","~$goog.events.EventType","^3@","^31"]]],["^1L","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^3@"]]],["^1L","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^31"]]],["^1L","clojure/set.cljs"],["86bedf67c795c72bde3feb0415b41be8b95f2cbb","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y"]]],["^1L","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2Z","^2[","^2Y"]]],["^1L","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^2[","^39"]]],["^1L","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^4K"]]],["^1L","re_frame/trace.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2Q",["^ ","^2R",null,"^2S",["^K",[]],"^2T",["^[","^Y","^3E","^13","^3Z"]]]]],"~:clj-info",["^ ","jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/instant.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1620986767000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64_vlq.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/externs.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/util.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/core.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/analyzer/impl.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/inspect.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map.clj",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/impl/errors.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/interop.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/core.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1615061596000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1596475466000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/ratom.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/compiler.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/default_data_readers.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/trace.cljc",1620893892000,"jar:file:/Users/lcerveau/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/interop.clj",1620893892000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/tagged_literals.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/tools.reader/1.3.3/tools.reader-1.3.3.jar!/clojure/tools/reader/reader_types.clj",1620986526000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/env.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/js_deps.cljc",1620991109000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1620800833000,"jar:file:/Users/lcerveau/.m2/repository/reagent/reagent/1.0.0/reagent-1.0.0.jar!/reagent/debug.clj",1620893898000,"jar:file:/Users/lcerveau/.m2/repository/org/clojure/clojurescript/1.10.844/clojurescript-1.10.844.jar!/cljs/source_map/base64.clj",1620991109000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^P",null,"^Q",["^ ","^R","^S","^T","^T","^U","^V","^W","^W","^X","^X","^Y","^Y","^Z","^T","^[","^[","^10","^W","^11","^11","^12","^X","^13","^13","^14","^11","^S","^S","^V","^V","^15","^15"],"^16",["^K",["^17"]],"^18",["^ ","^19","^T","^1:","^T","^1;","^T","^1<","^T","^1=","^T","^1>","^T","^1?","^13","^1@","^15"],"~:defs",["^ ","~$unwrap",["^ ","^L","^2L","^7","re_frame/std_interceptors.cljc","^8",40,"^9",1,"^:",40,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",40,"^9",6,"^:",40,"^;",12],"~:tag","~$cljs.core/IMap"],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",223,"^9",8,"^:",223,"^;",18,"~:arglists",["^1C",["~$quote",["^1C",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1C",["~$f","^5R","^5S"]]],"^5P",["^1C",[["~$f","^5R","~$&","^5S"]]],"~:arglists-meta",["^1C",[null]]]],"^L","^2M","^7","re_frame/std_interceptors.cljc","^;",18,"^5T",["^ ","^5U",true,"^5V",2,"^5W",2,"^5X",[["^1C",["~$f","^5R","^5S"]]],"^5P",["^1C",[["~$f","^5R","~$&","^5S"]]],"^5Y",["^1C",[null]]],"^5X",[["^1C",["~$f","^5R","^5S"]]],"~:protocol-impl",null,"^5V",2,"^5Y",["^1C",[null]],"^9",1,"^5U",true,"~:methods",[["^ ","^5V",2,"^5U",true,"^5L","^5M"]],"^8",223,"~:ret-tag","~$any","^:",223,"^5W",2,"~:fn-var",true,"^5P",["^1C",[["~$f","^5R","~$&","^5S"]]]],"~$enrich",["^ ","^5O",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",195,"^9",7,"^:",195,"^;",13,"^5P",["^1C",["^5Q",["^1C",[["~$f"]]]]]],"^L","^2?","^7","re_frame/std_interceptors.cljc","^;",13,"^5X",["^1C",[["~$f"]]],"^5Z",null,"^5Y",["^1C",[null,null]],"^9",1,"^5U",false,"^8",195,"^60","^5M","^:",195,"^5W",1,"^62",true,"^5P",["^1C",["^5Q",["^1C",[["~$f"]]]]]],"~$path",["^ ","^5O",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",166,"^9",7,"^:",166,"^;",11,"^5P",["^1C",["^5Q",["^1C",[["~$&","~$args"]]]]],"^5T",["^ ","^5U",true,"^5V",0,"^5W",0,"^5X",[["^1C",["^65"]]],"^5P",["^1C",[["~$&","^65"]]],"^5Y",["^1C",[null]]]],"^L","^2K","^7","re_frame/std_interceptors.cljc","^;",11,"^5T",["^ ","^5U",true,"^5V",0,"^5W",0,"^5X",[["^1C",["^65"]]],"^5P",["^1C",[["~$&","^65"]]],"^5Y",["^1C",[null]]],"^5X",[["^1C",["^65"]]],"^5Z",null,"^5V",0,"^5Y",["^1C",[null]],"^9",1,"^5U",true,"^5[",[["^ ","^5V",0,"^5U",true,"^5L","^5M"]],"^8",166,"^60","^61","^:",166,"^5W",0,"^62",true,"^5P",["^1C",[["~$&","^65"]]]],"~$ctx-handler->interceptor",["^ ","^5O",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",140,"^9",7,"^:",140,"^;",31,"^5P",["^1C",["^5Q",["^1C",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^L","^2@","^7","re_frame/std_interceptors.cljc","^;",31,"^5X",["^1C",[["^67"]]],"^5Z",null,"^5Y",["^1C",[null,null]],"^9",1,"^5U",false,"^8",140,"^60","^5M","^:",140,"^5W",1,"^62",true,"^5P",["^1C",["^5Q",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^L","^1Z","^7","re_frame/std_interceptors.cljc","^8",15,"^9",1,"^:",15,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",15,"^9",6,"^:",15,"^;",11],"^5L","^5M"],"~$trim-v",["^ ","^L","^25","^7","re_frame/std_interceptors.cljc","^8",57,"^9",1,"^:",57,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",57,"^9",6,"^:",57,"^;",12],"^5L","^5M"],"~$after",["^ ","^5O",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",210,"^9",7,"^:",210,"^;",12,"^5P",["^1C",["^5Q",["^1C",[["~$f"]]]]]],"^L","^2E","^7","re_frame/std_interceptors.cljc","^;",12,"^5X",["^1C",[["~$f"]]],"^5Z",null,"^5Y",["^1C",[null,null]],"^9",1,"^5U",false,"^8",210,"^60","^5M","^:",210,"^5W",1,"^62",true,"^5P",["^1C",["^5Q",["^1C",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^5O",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",109,"^9",7,"^:",109,"^;",30,"^5P",["^1C",["^5Q",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^L","^2B","^7","re_frame/std_interceptors.cljc","^;",30,"^5X",["^1C",[["^67"]]],"^5Z",null,"^5Y",["^1C",[null,null]],"^9",1,"^5U",false,"^8",109,"^60","^5M","^:",109,"^5W",1,"^62",true,"^5P",["^1C",["^5Q",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :dispatch ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^5O",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",77,"^9",7,"^:",77,"^;",30,"^5P",["^1C",["^5Q",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^L","^27","^7","re_frame/std_interceptors.cljc","^;",30,"^5X",["^1C",[["^67"]]],"^5Z",null,"^5Y",["^1C",[null,null]],"^9",1,"^5U",false,"^8",77,"^60","^5M","^:",77,"^5W",1,"^62",true,"^5P",["^1C",["^5Q",["^1C",[["^67"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",247,"^9",6,"^:",247,"^;",32],"^L","^24","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",247,"^:",247,"^5L","^5M","^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1A",["^ ","^W","^W","^10","^W","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^16",["^K",["~:path","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^6Q","^6K","^71","^73","^6O","^6P","^6C","^6E","^6B","^6Z","^6X","^6G","^6A","^6L","^6N","^72","^6H","^6M","^6I","^6J","^6W","^6@","^6R","^6U","^6D","^6[","^6V","^6T","^6?","^70","^6Y","^6S","^6F"]],"^1H",["^ ","^17",["^K",[]]],"^1I",["^ "],"^1J",["^[","^Y","^T","^13","^X","^15","^V","^S","^11","^W"]],"^O","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2P",[["^77","~:static-fns"],true,["^77","~:shadow-tweaks"],null,["^77","~:source-map-inline"],null,["^77","~:elide-asserts"],false,["^77","~:optimize-constants"],null,["^77","^1O"],null,["^77","~:external-config"],null,["^77","~:tooling-config"],null,["^77","~:emit-constants"],null,["^77","~:load-tests"],null,["^77","~:form-size-threshold"],null,["^77","~:data-readers"],null,["^77","~:infer-externs"],"~:auto",["^77","^1Q"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^77","~:fn-invoke-direct"],null,["^77","~:source-map"],"/dev/null"]]]