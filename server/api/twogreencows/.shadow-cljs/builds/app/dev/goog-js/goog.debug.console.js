["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/debug/console.js"],"~:js","goog.provide(\"goog.debug.Console\");\ngoog.require(\"goog.debug.LogManager\");\ngoog.require(\"goog.debug.Logger\");\ngoog.require(\"goog.debug.TextFormatter\");\ngoog.debug.Console = function() {\n  this.publishHandler_ = goog.bind(this.addLogRecord, this);\n  this.formatter_ = new goog.debug.TextFormatter;\n  this.formatter_.showAbsoluteTime = false;\n  this.formatter_.showExceptionText = false;\n  this.formatter_.appendNewline = false;\n  this.isCapturing_ = false;\n  this.logBuffer_ = \"\";\n  this.filteredLoggers_ = {};\n};\ngoog.debug.Console.prototype.getFormatter = function() {\n  return this.formatter_;\n};\ngoog.debug.Console.prototype.setCapturing = function(capturing) {\n  if (capturing == this.isCapturing_) {\n    return;\n  }\n  var rootLogger = goog.debug.LogManager.getRoot();\n  if (capturing) {\n    rootLogger.addHandler(this.publishHandler_);\n  } else {\n    rootLogger.removeHandler(this.publishHandler_);\n  }\n  this.isCapturing_ = capturing;\n};\ngoog.debug.Console.prototype.addLogRecord = function(logRecord) {\n  if (this.filteredLoggers_[logRecord.getLoggerName()]) {\n    return;\n  }\n  function getConsoleMethodName_(level) {\n    if (level) {\n      if (level.value >= goog.debug.Logger.Level.SEVERE.value) {\n        return \"error\";\n      }\n      if (level.value >= goog.debug.Logger.Level.WARNING.value) {\n        return \"warn\";\n      }\n      if (level.value >= goog.debug.Logger.Level.CONFIG.value) {\n        return \"log\";\n      }\n    }\n    return \"debug\";\n  }\n  var record = this.formatter_.formatRecord(logRecord);\n  var console = goog.debug.Console.console_;\n  if (console) {\n    var logMethod = getConsoleMethodName_(logRecord.getLevel());\n    goog.debug.Console.logToConsole_(console, logMethod, record, logRecord.getException());\n  } else {\n    this.logBuffer_ += record;\n  }\n};\ngoog.debug.Console.prototype.addFilter = function(loggerName) {\n  this.filteredLoggers_[loggerName] = true;\n};\ngoog.debug.Console.prototype.removeFilter = function(loggerName) {\n  delete this.filteredLoggers_[loggerName];\n};\ngoog.debug.Console.instance = null;\ngoog.debug.Console.console_ = goog.global[\"console\"];\ngoog.debug.Console.setConsole = function(console) {\n  goog.debug.Console.console_ = console;\n};\ngoog.debug.Console.autoInstall = function() {\n  if (!goog.debug.Console.instance) {\n    goog.debug.Console.instance = new goog.debug.Console;\n  }\n  if (goog.global.location && goog.global.location.href.indexOf(\"Debug\\x3dtrue\") != -1) {\n    goog.debug.Console.instance.setCapturing(true);\n  }\n};\ngoog.debug.Console.show = function() {\n  alert(goog.debug.Console.instance.logBuffer_);\n};\ngoog.debug.Console.logToConsole_ = function(console, fnName, record, exception) {\n  if (console[fnName]) {\n    console[fnName](record, exception || \"\");\n  } else {\n    console.log(record, exception || \"\");\n  }\n};\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Simple logger that logs to the window console if available.\n *\n * Has an autoInstall option which can be put into initialization code, which\n * will start logging if \"Debug=true\" is in document.location.href\n *\n */\n\ngoog.provide('goog.debug.Console');\n\ngoog.require('goog.debug.LogManager');\ngoog.require('goog.debug.Logger');\ngoog.require('goog.debug.TextFormatter');\n\n\n\n/**\n * Create and install a log handler that logs to window.console if available\n * @constructor\n */\ngoog.debug.Console = function() {\n  this.publishHandler_ = goog.bind(this.addLogRecord, this);\n\n  /**\n   * Formatter for formatted output.\n   * @type {!goog.debug.TextFormatter}\n   * @private\n   */\n  this.formatter_ = new goog.debug.TextFormatter();\n  this.formatter_.showAbsoluteTime = false;\n  this.formatter_.showExceptionText = false;\n  // The console logging methods automatically append a newline.\n  this.formatter_.appendNewline = false;\n\n  this.isCapturing_ = false;\n  this.logBuffer_ = '';\n\n  /**\n   * Loggers that we shouldn't output.\n   * @type {!Object<boolean>}\n   * @private\n   */\n  this.filteredLoggers_ = {};\n};\n\n\n/**\n * Returns the text formatter used by this console\n * @return {!goog.debug.TextFormatter} The text formatter.\n */\ngoog.debug.Console.prototype.getFormatter = function() {\n  return this.formatter_;\n};\n\n\n/**\n * Sets whether we are currently capturing logger output.\n * @param {boolean} capturing Whether to capture logger output.\n */\ngoog.debug.Console.prototype.setCapturing = function(capturing) {\n  if (capturing == this.isCapturing_) {\n    return;\n  }\n\n  // attach or detach handler from the root logger\n  var rootLogger = goog.debug.LogManager.getRoot();\n  if (capturing) {\n    rootLogger.addHandler(this.publishHandler_);\n  } else {\n    rootLogger.removeHandler(this.publishHandler_);\n  }\n  this.isCapturing_ = capturing;\n};\n\n\n/**\n * Adds a log record.\n * @param {?goog.debug.LogRecord} logRecord The log entry.\n */\ngoog.debug.Console.prototype.addLogRecord = function(logRecord) {\n  // Check to see if the log record is filtered or not.\n  if (this.filteredLoggers_[logRecord.getLoggerName()]) {\n    return;\n  }\n\n  /**\n   * @param {?goog.debug.Logger.Level} level\n   * @return {string}\n   */\n  function getConsoleMethodName_(level) {\n    if (level) {\n      if (level.value >= goog.debug.Logger.Level.SEVERE.value) {\n        // SEVERE == 1000, SHOUT == 1200\n        return 'error';\n      }\n      if (level.value >= goog.debug.Logger.Level.WARNING.value) {\n        return 'warn';\n      }\n      // NOTE(martone): there's a goog.debug.Logger.Level.INFO - that we should\n      // presumably map to console.info. However, the current mapping is INFO ->\n      // console.log. Let's keep the status quo for now, but we should\n      // reevaluate if we tweak the goog.log API.\n      if (level.value >= goog.debug.Logger.Level.CONFIG.value) {\n        return 'log';\n      }\n    }\n    return 'debug';\n  }\n\n  var record = this.formatter_.formatRecord(logRecord);\n  var console = goog.debug.Console.console_;\n  if (console) {\n    // TODO(b/117415985): Make getLevel() non-null and update\n    // getConsoleMethodName_ parameters.\n    var logMethod = getConsoleMethodName_(logRecord.getLevel());\n    goog.debug.Console.logToConsole_(\n        console, logMethod, record, logRecord.getException());\n  } else {\n    this.logBuffer_ += record;\n  }\n};\n\n\n/**\n * Adds a logger name to be filtered.\n * @param {string} loggerName the logger name to add.\n */\ngoog.debug.Console.prototype.addFilter = function(loggerName) {\n  this.filteredLoggers_[loggerName] = true;\n};\n\n\n/**\n * Removes a logger name to be filtered.\n * @param {string} loggerName the logger name to remove.\n */\ngoog.debug.Console.prototype.removeFilter = function(loggerName) {\n  delete this.filteredLoggers_[loggerName];\n};\n\n\n/**\n * Global console logger instance\n * @type {?goog.debug.Console}\n */\ngoog.debug.Console.instance = null;\n\n\n/**\n * The console to which to log.  This is a property so it can be mocked out in\n * this unit test for goog.debug.Console. Using goog.global, as console might be\n * used in window-less contexts.\n * @type {{log:!Function}}\n * @private\n */\ngoog.debug.Console.console_ = goog.global['console'];\n\n\n/**\n * Sets the console to which to log.\n * @param {!Object} console The console to which to log.\n */\ngoog.debug.Console.setConsole = function(console) {\n  goog.debug.Console.console_ = /** @type {{log:!Function}} */ (console);\n};\n\n\n/**\n * Install the console and start capturing if \"Debug=true\" is in the page URL\n */\ngoog.debug.Console.autoInstall = function() {\n  if (!goog.debug.Console.instance) {\n    goog.debug.Console.instance = new goog.debug.Console();\n  }\n\n  if (goog.global.location &&\n      goog.global.location.href.indexOf('Debug=true') != -1) {\n    goog.debug.Console.instance.setCapturing(true);\n  }\n};\n\n\n/**\n * Show an alert with all of the captured debug information.\n * Information is only captured if console is not available\n */\ngoog.debug.Console.show = function() {\n  alert(goog.debug.Console.instance.logBuffer_);\n};\n\n\n/**\n * Logs the record to the console using the given function.  If the function is\n * not available on the console object, the log function is used instead.\n * @param {{log:!Function}} console The console object.\n * @param {string} fnName The name of the function to use.\n * @param {string} record The record to log.\n * @param {?Object} exception An additional Error to log.\n * @private\n */\ngoog.debug.Console.logToConsole_ = function(\n    console, fnName, record, exception) {\n  if (console[fnName]) {\n    console[fnName](record, exception || '');\n  } else {\n    console.log(record, exception || '');\n  }\n};\n","~:compiled-at",1626505468135,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.debug.console.js\",\n\"lineCount\":86,\n\"mappings\":\"AAsBAA,IAAKC,CAAAA,OAAL,CAAa,oBAAb,CAAA;AAEAD,IAAKE,CAAAA,OAAL,CAAa,uBAAb,CAAA;AACAF,IAAKE,CAAAA,OAAL,CAAa,mBAAb,CAAA;AACAF,IAAKE,CAAAA,OAAL,CAAa,0BAAb,CAAA;AAQAF,IAAKG,CAAAA,KAAMC,CAAAA,OAAX,GAAqBC,QAAQ,EAAG;AAC9B,MAAKC,CAAAA,eAAL,GAAuBN,IAAKO,CAAAA,IAAL,CAAU,IAAKC,CAAAA,YAAf,EAA6B,IAA7B,CAAvB;AAOA,MAAKC,CAAAA,UAAL,GAAkB,IAAIT,IAAKG,CAAAA,KAAMO,CAAAA,aAAjC;AACA,MAAKD,CAAAA,UAAWE,CAAAA,gBAAhB,GAAmC,KAAnC;AACA,MAAKF,CAAAA,UAAWG,CAAAA,iBAAhB,GAAoC,KAApC;AAEA,MAAKH,CAAAA,UAAWI,CAAAA,aAAhB,GAAgC,KAAhC;AAEA,MAAKC,CAAAA,YAAL,GAAoB,KAApB;AACA,MAAKC,CAAAA,UAAL,GAAkB,EAAlB;AAOA,MAAKC,CAAAA,gBAAL,GAAwB,EAAxB;AAtB8B,CAAhC;AA8BAhB,IAAKG,CAAAA,KAAMC,CAAAA,OAAQa,CAAAA,SAAUC,CAAAA,YAA7B,GAA4CC,QAAQ,EAAG;AACrD,SAAO,IAAKV,CAAAA,UAAZ;AADqD,CAAvD;AASAT,IAAKG,CAAAA,KAAMC,CAAAA,OAAQa,CAAAA,SAAUG,CAAAA,YAA7B,GAA4CC,QAAQ,CAACC,SAAD,CAAY;AAC9D,MAAIA,SAAJ,IAAiB,IAAKR,CAAAA,YAAtB;AACE;AADF;AAKA,MAAIS,aAAavB,IAAKG,CAAAA,KAAMqB,CAAAA,UAAWC,CAAAA,OAAtB,EAAjB;AACA,MAAIH,SAAJ;AACEC,cAAWG,CAAAA,UAAX,CAAsB,IAAKpB,CAAAA,eAA3B,CAAA;AADF;AAGEiB,cAAWI,CAAAA,aAAX,CAAyB,IAAKrB,CAAAA,eAA9B,CAAA;AAHF;AAKA,MAAKQ,CAAAA,YAAL,GAAoBQ,SAApB;AAZ8D,CAAhE;AAoBAtB,IAAKG,CAAAA,KAAMC,CAAAA,OAAQa,CAAAA,SAAUT,CAAAA,YAA7B,GAA4CoB,QAAQ,CAACC,SAAD,CAAY;AAE9D,MAAI,IAAKb,CAAAA,gBAAL,CAAsBa,SAAUC,CAAAA,aAAV,EAAtB,CAAJ;AACE;AADF;AAQAC,UAASA,sBAAqB,CAACC,KAAD,CAAQ;AACpC,QAAIA,KAAJ,CAAW;AACT,UAAIA,KAAMC,CAAAA,KAAV,IAAmBjC,IAAKG,CAAAA,KAAM+B,CAAAA,MAAOC,CAAAA,KAAMC,CAAAA,MAAOH,CAAAA,KAAlD;AAEE,eAAO,OAAP;AAFF;AAIA,UAAID,KAAMC,CAAAA,KAAV,IAAmBjC,IAAKG,CAAAA,KAAM+B,CAAAA,MAAOC,CAAAA,KAAME,CAAAA,OAAQJ,CAAAA,KAAnD;AACE,eAAO,MAAP;AADF;AAOA,UAAID,KAAMC,CAAAA,KAAV,IAAmBjC,IAAKG,CAAAA,KAAM+B,CAAAA,MAAOC,CAAAA,KAAMG,CAAAA,MAAOL,CAAAA,KAAlD;AACE,eAAO,KAAP;AADF;AAZS;AAgBX,WAAO,OAAP;AAjBoC;AAoBtC,MAAIM,SAAS,IAAK9B,CAAAA,UAAW+B,CAAAA,YAAhB,CAA6BX,SAA7B,CAAb;AACA,MAAIY,UAAUzC,IAAKG,CAAAA,KAAMC,CAAAA,OAAQsC,CAAAA,QAAjC;AACA,MAAID,OAAJ,CAAa;AAGX,QAAIE,YAAYZ,qBAAA,CAAsBF,SAAUe,CAAAA,QAAV,EAAtB,CAAhB;AACA5C,QAAKG,CAAAA,KAAMC,CAAAA,OAAQyC,CAAAA,aAAnB,CACIJ,OADJ,EACaE,SADb,EACwBJ,MADxB,EACgCV,SAAUiB,CAAAA,YAAV,EADhC,CAAA;AAJW,GAAb;AAOE,QAAK/B,CAAAA,UAAL,IAAmBwB,MAAnB;AAPF;AAhC8D,CAAhE;AAgDAvC,IAAKG,CAAAA,KAAMC,CAAAA,OAAQa,CAAAA,SAAU8B,CAAAA,SAA7B,GAAyCC,QAAQ,CAACC,UAAD,CAAa;AAC5D,MAAKjC,CAAAA,gBAAL,CAAsBiC,UAAtB,CAAA,GAAoC,IAApC;AAD4D,CAA9D;AASAjD,IAAKG,CAAAA,KAAMC,CAAAA,OAAQa,CAAAA,SAAUiC,CAAAA,YAA7B,GAA4CC,QAAQ,CAACF,UAAD,CAAa;AAC/D,SAAO,IAAKjC,CAAAA,gBAAL,CAAsBiC,UAAtB,CAAP;AAD+D,CAAjE;AASAjD,IAAKG,CAAAA,KAAMC,CAAAA,OAAQgD,CAAAA,QAAnB,GAA8B,IAA9B;AAUApD,IAAKG,CAAAA,KAAMC,CAAAA,OAAQsC,CAAAA,QAAnB,GAA8B1C,IAAKqD,CAAAA,MAAL,CAAY,SAAZ,CAA9B;AAOArD,IAAKG,CAAAA,KAAMC,CAAAA,OAAQkD,CAAAA,UAAnB,GAAgCC,QAAQ,CAACd,OAAD,CAAU;AAChDzC,MAAKG,CAAAA,KAAMC,CAAAA,OAAQsC,CAAAA,QAAnB,GAA8DD,OAA9D;AADgD,CAAlD;AAQAzC,IAAKG,CAAAA,KAAMC,CAAAA,OAAQoD,CAAAA,WAAnB,GAAiCC,QAAQ,EAAG;AAC1C,MAAI,CAACzD,IAAKG,CAAAA,KAAMC,CAAAA,OAAQgD,CAAAA,QAAxB;AACEpD,QAAKG,CAAAA,KAAMC,CAAAA,OAAQgD,CAAAA,QAAnB,GAA8B,IAAIpD,IAAKG,CAAAA,KAAMC,CAAAA,OAA7C;AADF;AAIA,MAAIJ,IAAKqD,CAAAA,MAAOK,CAAAA,QAAhB,IACI1D,IAAKqD,CAAAA,MAAOK,CAAAA,QAASC,CAAAA,IAAKC,CAAAA,OAA1B,CAAkC,eAAlC,CADJ,IACuD,EADvD;AAEE5D,QAAKG,CAAAA,KAAMC,CAAAA,OAAQgD,CAAAA,QAAShC,CAAAA,YAA5B,CAAyC,IAAzC,CAAA;AAFF;AAL0C,CAA5C;AAgBApB,IAAKG,CAAAA,KAAMC,CAAAA,OAAQyD,CAAAA,IAAnB,GAA0BC,QAAQ,EAAG;AACnCC,OAAA,CAAM/D,IAAKG,CAAAA,KAAMC,CAAAA,OAAQgD,CAAAA,QAASrC,CAAAA,UAAlC,CAAA;AADmC,CAArC;AAcAf,IAAKG,CAAAA,KAAMC,CAAAA,OAAQyC,CAAAA,aAAnB,GAAmCmB,QAAQ,CACvCvB,OADuC,EAC9BwB,MAD8B,EACtB1B,MADsB,EACd2B,SADc,CACH;AACtC,MAAIzB,OAAA,CAAQwB,MAAR,CAAJ;AACExB,WAAA,CAAQwB,MAAR,CAAA,CAAgB1B,MAAhB,EAAwB2B,SAAxB,IAAqC,EAArC,CAAA;AADF;AAGEzB,WAAQ0B,CAAAA,GAAR,CAAY5B,MAAZ,EAAoB2B,SAApB,IAAiC,EAAjC,CAAA;AAHF;AADsC,CADxC;;\",\n\"sources\":[\"goog/debug/console.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Simple logger that logs to the window console if available.\\n *\\n * Has an autoInstall option which can be put into initialization code, which\\n * will start logging if \\\"Debug=true\\\" is in document.location.href\\n *\\n */\\n\\ngoog.provide('goog.debug.Console');\\n\\ngoog.require('goog.debug.LogManager');\\ngoog.require('goog.debug.Logger');\\ngoog.require('goog.debug.TextFormatter');\\n\\n\\n\\n/**\\n * Create and install a log handler that logs to window.console if available\\n * @constructor\\n */\\ngoog.debug.Console = function() {\\n  this.publishHandler_ = goog.bind(this.addLogRecord, this);\\n\\n  /**\\n   * Formatter for formatted output.\\n   * @type {!goog.debug.TextFormatter}\\n   * @private\\n   */\\n  this.formatter_ = new goog.debug.TextFormatter();\\n  this.formatter_.showAbsoluteTime = false;\\n  this.formatter_.showExceptionText = false;\\n  // The console logging methods automatically append a newline.\\n  this.formatter_.appendNewline = false;\\n\\n  this.isCapturing_ = false;\\n  this.logBuffer_ = '';\\n\\n  /**\\n   * Loggers that we shouldn't output.\\n   * @type {!Object<boolean>}\\n   * @private\\n   */\\n  this.filteredLoggers_ = {};\\n};\\n\\n\\n/**\\n * Returns the text formatter used by this console\\n * @return {!goog.debug.TextFormatter} The text formatter.\\n */\\ngoog.debug.Console.prototype.getFormatter = function() {\\n  return this.formatter_;\\n};\\n\\n\\n/**\\n * Sets whether we are currently capturing logger output.\\n * @param {boolean} capturing Whether to capture logger output.\\n */\\ngoog.debug.Console.prototype.setCapturing = function(capturing) {\\n  if (capturing == this.isCapturing_) {\\n    return;\\n  }\\n\\n  // attach or detach handler from the root logger\\n  var rootLogger = goog.debug.LogManager.getRoot();\\n  if (capturing) {\\n    rootLogger.addHandler(this.publishHandler_);\\n  } else {\\n    rootLogger.removeHandler(this.publishHandler_);\\n  }\\n  this.isCapturing_ = capturing;\\n};\\n\\n\\n/**\\n * Adds a log record.\\n * @param {?goog.debug.LogRecord} logRecord The log entry.\\n */\\ngoog.debug.Console.prototype.addLogRecord = function(logRecord) {\\n  // Check to see if the log record is filtered or not.\\n  if (this.filteredLoggers_[logRecord.getLoggerName()]) {\\n    return;\\n  }\\n\\n  /**\\n   * @param {?goog.debug.Logger.Level} level\\n   * @return {string}\\n   */\\n  function getConsoleMethodName_(level) {\\n    if (level) {\\n      if (level.value >= goog.debug.Logger.Level.SEVERE.value) {\\n        // SEVERE == 1000, SHOUT == 1200\\n        return 'error';\\n      }\\n      if (level.value >= goog.debug.Logger.Level.WARNING.value) {\\n        return 'warn';\\n      }\\n      // NOTE(martone): there's a goog.debug.Logger.Level.INFO - that we should\\n      // presumably map to console.info. However, the current mapping is INFO ->\\n      // console.log. Let's keep the status quo for now, but we should\\n      // reevaluate if we tweak the goog.log API.\\n      if (level.value >= goog.debug.Logger.Level.CONFIG.value) {\\n        return 'log';\\n      }\\n    }\\n    return 'debug';\\n  }\\n\\n  var record = this.formatter_.formatRecord(logRecord);\\n  var console = goog.debug.Console.console_;\\n  if (console) {\\n    // TODO(b/117415985): Make getLevel() non-null and update\\n    // getConsoleMethodName_ parameters.\\n    var logMethod = getConsoleMethodName_(logRecord.getLevel());\\n    goog.debug.Console.logToConsole_(\\n        console, logMethod, record, logRecord.getException());\\n  } else {\\n    this.logBuffer_ += record;\\n  }\\n};\\n\\n\\n/**\\n * Adds a logger name to be filtered.\\n * @param {string} loggerName the logger name to add.\\n */\\ngoog.debug.Console.prototype.addFilter = function(loggerName) {\\n  this.filteredLoggers_[loggerName] = true;\\n};\\n\\n\\n/**\\n * Removes a logger name to be filtered.\\n * @param {string} loggerName the logger name to remove.\\n */\\ngoog.debug.Console.prototype.removeFilter = function(loggerName) {\\n  delete this.filteredLoggers_[loggerName];\\n};\\n\\n\\n/**\\n * Global console logger instance\\n * @type {?goog.debug.Console}\\n */\\ngoog.debug.Console.instance = null;\\n\\n\\n/**\\n * The console to which to log.  This is a property so it can be mocked out in\\n * this unit test for goog.debug.Console. Using goog.global, as console might be\\n * used in window-less contexts.\\n * @type {{log:!Function}}\\n * @private\\n */\\ngoog.debug.Console.console_ = goog.global['console'];\\n\\n\\n/**\\n * Sets the console to which to log.\\n * @param {!Object} console The console to which to log.\\n */\\ngoog.debug.Console.setConsole = function(console) {\\n  goog.debug.Console.console_ = /** @type {{log:!Function}} */ (console);\\n};\\n\\n\\n/**\\n * Install the console and start capturing if \\\"Debug=true\\\" is in the page URL\\n */\\ngoog.debug.Console.autoInstall = function() {\\n  if (!goog.debug.Console.instance) {\\n    goog.debug.Console.instance = new goog.debug.Console();\\n  }\\n\\n  if (goog.global.location &&\\n      goog.global.location.href.indexOf('Debug=true') != -1) {\\n    goog.debug.Console.instance.setCapturing(true);\\n  }\\n};\\n\\n\\n/**\\n * Show an alert with all of the captured debug information.\\n * Information is only captured if console is not available\\n */\\ngoog.debug.Console.show = function() {\\n  alert(goog.debug.Console.instance.logBuffer_);\\n};\\n\\n\\n/**\\n * Logs the record to the console using the given function.  If the function is\\n * not available on the console object, the log function is used instead.\\n * @param {{log:!Function}} console The console object.\\n * @param {string} fnName The name of the function to use.\\n * @param {string} record The record to log.\\n * @param {?Object} exception An additional Error to log.\\n * @private\\n */\\ngoog.debug.Console.logToConsole_ = function(\\n    console, fnName, record, exception) {\\n  if (console[fnName]) {\\n    console[fnName](record, exception || '');\\n  } else {\\n    console.log(record, exception || '');\\n  }\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"debug\",\"Console\",\"goog.debug.Console\",\"publishHandler_\",\"bind\",\"addLogRecord\",\"formatter_\",\"TextFormatter\",\"showAbsoluteTime\",\"showExceptionText\",\"appendNewline\",\"isCapturing_\",\"logBuffer_\",\"filteredLoggers_\",\"prototype\",\"getFormatter\",\"goog.debug.Console.prototype.getFormatter\",\"setCapturing\",\"goog.debug.Console.prototype.setCapturing\",\"capturing\",\"rootLogger\",\"LogManager\",\"getRoot\",\"addHandler\",\"removeHandler\",\"goog.debug.Console.prototype.addLogRecord\",\"logRecord\",\"getLoggerName\",\"getConsoleMethodName_\",\"level\",\"value\",\"Logger\",\"Level\",\"SEVERE\",\"WARNING\",\"CONFIG\",\"record\",\"formatRecord\",\"console\",\"console_\",\"logMethod\",\"getLevel\",\"logToConsole_\",\"getException\",\"addFilter\",\"goog.debug.Console.prototype.addFilter\",\"loggerName\",\"removeFilter\",\"goog.debug.Console.prototype.removeFilter\",\"instance\",\"global\",\"setConsole\",\"goog.debug.Console.setConsole\",\"autoInstall\",\"goog.debug.Console.autoInstall\",\"location\",\"href\",\"indexOf\",\"show\",\"goog.debug.Console.show\",\"alert\",\"goog.debug.Console.logToConsole_\",\"fnName\",\"exception\",\"log\"]\n}\n"]