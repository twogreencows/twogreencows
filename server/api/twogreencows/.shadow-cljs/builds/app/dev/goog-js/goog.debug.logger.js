["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/debug/logger.js"],"~:js","goog.provide(\"goog.debug.LogManager\");\ngoog.provide(\"goog.debug.Loggable\");\ngoog.provide(\"goog.debug.Logger\");\ngoog.provide(\"goog.debug.Logger.Level\");\ngoog.require(\"goog.array\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.debug\");\ngoog.require(\"goog.debug.LogBuffer\");\ngoog.require(\"goog.debug.LogRecord\");\ngoog.debug.Loggable;\ngoog.debug.Logger = function(name) {\n  this.name_ = name;\n  this.parent_ = null;\n  this.level_ = null;\n  this.children_ = null;\n  this.handlers_ = null;\n};\ngoog.debug.Logger.ROOT_LOGGER_NAME = \"\";\ngoog.debug.Logger.ENABLE_HIERARCHY = goog.define(\"goog.debug.Logger.ENABLE_HIERARCHY\", true);\ngoog.debug.Logger.ENABLE_PROFILER_LOGGING = goog.define(\"goog.debug.Logger.ENABLE_PROFILER_LOGGING\", false);\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\n  goog.debug.Logger.rootHandlers_ = [];\n  goog.debug.Logger.rootLevel_;\n}\ngoog.debug.Logger.Level = function(name, value) {\n  this.name = name;\n  this.value = value;\n};\ngoog.debug.Logger.Level.prototype.toString = function() {\n  return this.name;\n};\ngoog.debug.Logger.Level.OFF = new goog.debug.Logger.Level(\"OFF\", Infinity);\ngoog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level(\"SHOUT\", 1200);\ngoog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level(\"SEVERE\", 1000);\ngoog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level(\"WARNING\", 900);\ngoog.debug.Logger.Level.INFO = new goog.debug.Logger.Level(\"INFO\", 800);\ngoog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level(\"CONFIG\", 700);\ngoog.debug.Logger.Level.FINE = new goog.debug.Logger.Level(\"FINE\", 500);\ngoog.debug.Logger.Level.FINER = new goog.debug.Logger.Level(\"FINER\", 400);\ngoog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level(\"FINEST\", 300);\ngoog.debug.Logger.Level.ALL = new goog.debug.Logger.Level(\"ALL\", 0);\ngoog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];\ngoog.debug.Logger.Level.predefinedLevelsCache_ = null;\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {\n  goog.debug.Logger.Level.predefinedLevelsCache_ = {};\n  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i]; i++) {\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\ngoog.debug.Logger.Level.getPredefinedLevel = function(name) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\n};\ngoog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\n  }\n  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\n    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\ngoog.debug.Logger.getLogger = function(name) {\n  return goog.debug.LogManager.getLogger(name);\n};\ngoog.debug.Logger.logToProfilers = function(msg) {\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    var msWriteProfilerMark = goog.global[\"msWriteProfilerMark\"];\n    if (msWriteProfilerMark) {\n      msWriteProfilerMark(msg);\n      return;\n    }\n    var console = goog.global[\"console\"];\n    if (console && console[\"timeStamp\"]) {\n      console[\"timeStamp\"](msg);\n    }\n  }\n};\ngoog.debug.Logger.prototype.getName = function() {\n  return this.name_;\n};\ngoog.debug.Logger.prototype.addHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      if (!this.handlers_) {\n        this.handlers_ = [];\n      }\n      this.handlers_.push(handler);\n    } else {\n      goog.asserts.assert(!this.name_, \"Cannot call addHandler on a non-root logger when \" + \"goog.debug.Logger.ENABLE_HIERARCHY is false.\");\n      goog.debug.Logger.rootHandlers_.push(handler);\n    }\n  }\n};\ngoog.debug.Logger.prototype.removeHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;\n    return !!handlers && goog.array.remove(handlers, handler);\n  } else {\n    return false;\n  }\n};\ngoog.debug.Logger.prototype.getParent = function() {\n  return this.parent_;\n};\ngoog.debug.Logger.prototype.getChildren = function() {\n  if (!this.children_) {\n    this.children_ = {};\n  }\n  return this.children_;\n};\ngoog.debug.Logger.prototype.setLevel = function(level) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      this.level_ = level;\n    } else {\n      goog.asserts.assert(!this.name_, \"Cannot call setLevel() on a non-root logger when \" + \"goog.debug.Logger.ENABLE_HIERARCHY is false.\");\n      goog.debug.Logger.rootLevel_ = level;\n    }\n  }\n};\ngoog.debug.Logger.prototype.getLevel = function() {\n  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;\n};\ngoog.debug.Logger.prototype.getEffectiveLevel = function() {\n  if (!goog.debug.LOGGING_ENABLED) {\n    return goog.debug.Logger.Level.OFF;\n  }\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\n    return goog.debug.Logger.rootLevel_;\n  }\n  if (this.level_) {\n    return this.level_;\n  }\n  if (this.parent_) {\n    return this.parent_.getEffectiveLevel();\n  }\n  goog.asserts.fail(\"Root logger has no level set.\");\n  return null;\n};\ngoog.debug.Logger.prototype.isLoggable = function(level) {\n  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;\n};\ngoog.debug.Logger.prototype.log = function(level, msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {\n    if (goog.isFunction(msg)) {\n      msg = msg();\n    }\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\n  }\n};\ngoog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\n    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\n  } else {\n    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);\n  }\n  if (opt_exception) {\n    logRecord.setException(opt_exception);\n  }\n  return logRecord;\n};\ngoog.debug.Logger.prototype.shout = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.severe = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.warning = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.info = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.config = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.fine = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.finer = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.finest = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n  }\n};\ngoog.debug.Logger.prototype.logRecord = function(logRecord) {\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {\n    this.doLogRecord_(logRecord);\n  }\n};\ngoog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    goog.debug.Logger.logToProfilers(\"log:\" + logRecord.getMessage());\n  }\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var target = this;\n    while (target) {\n      target.callPublish_(logRecord);\n      target = target.getParent();\n    }\n  } else {\n    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++];) {\n      handler(logRecord);\n    }\n  }\n};\ngoog.debug.Logger.prototype.callPublish_ = function(logRecord) {\n  if (this.handlers_) {\n    for (var i = 0, handler; handler = this.handlers_[i]; i++) {\n      handler(logRecord);\n    }\n  }\n};\ngoog.debug.Logger.prototype.setParent_ = function(parent) {\n  this.parent_ = parent;\n};\ngoog.debug.Logger.prototype.addChild_ = function(name, logger) {\n  this.getChildren()[name] = logger;\n};\ngoog.debug.LogManager = {};\ngoog.debug.LogManager.loggers_ = {};\ngoog.debug.LogManager.rootLogger_ = null;\ngoog.debug.LogManager.initialize = function() {\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\ngoog.debug.LogManager.getLoggers = function() {\n  return goog.debug.LogManager.loggers_;\n};\ngoog.debug.LogManager.getRoot = function() {\n  goog.debug.LogManager.initialize();\n  return goog.debug.LogManager.rootLogger_;\n};\ngoog.debug.LogManager.getLogger = function(name) {\n  goog.debug.LogManager.initialize();\n  var ret = goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\n  return function(info) {\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\n    logger.severe(\"Error: \" + info.message + \" (\" + info.fileName + \" @ Line: \" + info.line + \")\");\n  };\n};\ngoog.debug.LogManager.createLogger_ = function(name) {\n  var logger = new goog.debug.Logger(name);\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var lastDotIndex = name.lastIndexOf(\".\");\n    var parentName = name.substr(0, lastDotIndex);\n    var leafName = name.substr(lastDotIndex + 1);\n    var parentLogger = goog.debug.LogManager.getLogger(parentName);\n    parentLogger.addChild_(leafName, logger);\n    logger.setParent_(parentLogger);\n  }\n  goog.debug.LogManager.loggers_[name] = logger;\n  return logger;\n};\n","~:source","// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Logger class. Please minimize dependencies\n * this file has on other closure classes as any dependency it takes won't be\n * able to use the logging infrastructure.\n *\n * @see ../demos/debug.html\n */\n\ngoog.provide('goog.debug.LogManager');\ngoog.provide('goog.debug.Loggable');\ngoog.provide('goog.debug.Logger');\ngoog.provide('goog.debug.Logger.Level');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.debug.LogBuffer');\ngoog.require('goog.debug.LogRecord');\n\n\n/**\n * A message value that can be handled by a Logger.\n *\n * Functions are treated like callbacks, but are only called when the event's\n * log level is enabled. This is useful for logging messages that are expensive\n * to construct.\n *\n * @typedef {string|function(): string}\n */\ngoog.debug.Loggable;\n\n\n\n/**\n * The Logger is an object used for logging debug messages. Loggers are\n * normally named, using a hierarchical dot-separated namespace. Logger names\n * can be arbitrary strings, but they should normally be based on the package\n * name or class name of the logged component, such as goog.net.BrowserChannel.\n *\n * The Logger object is loosely based on the java class\n * java.util.logging.Logger. It supports different levels of filtering for\n * different loggers.\n *\n * The logger object should never be instantiated by application code. It\n * should always use the goog.debug.Logger.getLogger function.\n *\n * @constructor\n * @param {string} name The name of the Logger.\n * @final\n */\ngoog.debug.Logger = function(name) {\n  /**\n   * Name of the Logger. Generally a dot-separated namespace\n   * @private {string}\n   */\n  this.name_ = name;\n\n  /**\n   * Parent Logger.\n   * @private {?goog.debug.Logger}\n   */\n  this.parent_ = null;\n\n  /**\n   * Level that this logger only filters above. Null indicates it should\n   * inherit from the parent.\n   * @private {?goog.debug.Logger.Level}\n   */\n  this.level_ = null;\n\n  /**\n   * Map of children loggers. The keys are the leaf names of the children and\n   * the values are the child loggers.\n   * @private {?Object}\n   */\n  this.children_ = null;\n\n  /**\n   * Handlers that are listening to this logger.\n   * @private {?Array<?Function>}\n   */\n  this.handlers_ = null;\n};\n\n\n/** @const */\ngoog.debug.Logger.ROOT_LOGGER_NAME = '';\n\n\n/**\n * @define {boolean} Toggles whether loggers other than the root logger can have\n *     log handlers attached to them and whether they can have their log level\n *     set. Logging is a bit faster when this is set to false.\n */\ngoog.debug.Logger.ENABLE_HIERARCHY =\n    goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);\n\n\n/**\n * @define {boolean} Toggles whether active log statements are also recorded\n *     to the profiler.\n */\ngoog.debug.Logger.ENABLE_PROFILER_LOGGING =\n    goog.define('goog.debug.Logger.ENABLE_PROFILER_LOGGING', false);\n\n\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\n  /**\n   * @type {!Array<Function>}\n   * @private\n   */\n  goog.debug.Logger.rootHandlers_ = [];\n\n\n  /**\n   * @type {goog.debug.Logger.Level}\n   * @private\n   */\n  goog.debug.Logger.rootLevel_;\n}\n\n\n\n/**\n * The Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * <p>\n * Clients should normally use the predefined Level constants such\n * as Level.SEVERE.\n * <p>\n * The levels in descending order are:\n * <ul>\n * <li>SEVERE (highest value)\n * <li>WARNING\n * <li>INFO\n * <li>CONFIG\n * <li>FINE\n * <li>FINER\n * <li>FINEST  (lowest value)\n * </ul>\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @param {string} name The name of the level.\n * @param {number} value The numeric value of the level.\n * @constructor\n * @final\n */\ngoog.debug.Logger.Level = function(name, value) {\n  /**\n   * The name of the level\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * The numeric value of the level\n   * @type {number}\n   */\n  this.value = value;\n};\n\n\n/**\n * @return {string} String representation of the logger level.\n * @override\n */\ngoog.debug.Logger.Level.prototype.toString = function() {\n  return this.name;\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to <CODE>Infinity</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.OFF = new goog.debug.Logger.Level('OFF', Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to <CODE>1200</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to <CODE>1000</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to <CODE>900</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to <CODE>800</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to <CODE>700</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to <CODE>500</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to <CODE>400</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to <CODE>300</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\n\ngoog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to <CODE>0</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array<!goog.debug.Logger.Level>}\n * @final\n */\ngoog.debug.Logger.Level.PREDEFINED_LEVELS = [\n  goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT,\n  goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING,\n  goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG,\n  goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER,\n  goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL\n];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {?Object}\n * @private\n */\ngoog.debug.Logger.Level.predefinedLevelsCache_ = null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n * @private\n */\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {\n  goog.debug.Logger.Level.predefinedLevelsCache_ = {};\n  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n       i++) {\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevel = function(name) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level <= #value.\n * @param {number} value Level value.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in /** @type {!Object} */ (\n          goog.debug.Logger.Level.predefinedLevelsCache_)) {\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\n  }\n\n  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\n    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Finds or creates a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the LogManager configuration and it will configured to also send logging\n * output to its parent's handlers. It will be registered in the LogManager\n * global namespace.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n * @deprecated use {@link goog.log} instead.\n */\ngoog.debug.Logger.getLogger = function(name) {\n  return goog.debug.LogManager.getLogger(name);\n};\n\n\n/**\n * Logs a message to profiling tools, if available.\n * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\n * @param {string} msg The message to log.\n */\ngoog.debug.Logger.logToProfilers = function(msg) {\n  // Some browsers also log timeStamp calls to the console, only log\n  // if actually asked.\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    var msWriteProfilerMark = goog.global['msWriteProfilerMark'];\n    if (msWriteProfilerMark) {\n      // Logs a message to the Microsoft profiler\n      // On IE, console['timeStamp'] may output to console\n      msWriteProfilerMark(msg);\n      return;\n    }\n\n    // Using goog.global, as loggers might be used in window-less contexts.\n    var console = goog.global['console'];\n    if (console && console['timeStamp']) {\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\n      console['timeStamp'](msg);\n    }\n  }\n};\n\n\n/**\n * Gets the name of this logger.\n * @return {string} The name of this logger.\n */\ngoog.debug.Logger.prototype.getName = function() {\n  return this.name_;\n};\n\n\n/**\n * Adds a handler to the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to add.\n */\ngoog.debug.Logger.prototype.addHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      if (!this.handlers_) {\n        this.handlers_ = [];\n      }\n      this.handlers_.push(handler);\n    } else {\n      goog.asserts.assert(\n          !this.name_, 'Cannot call addHandler on a non-root logger when ' +\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n      goog.debug.Logger.rootHandlers_.push(handler);\n    }\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.debug.Logger.prototype.removeHandler = function(handler) {\n  if (goog.debug.LOGGING_ENABLED) {\n    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ?\n        this.handlers_ :\n        goog.debug.Logger.rootHandlers_;\n    return !!handlers && goog.array.remove(handlers, handler);\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * Returns the parent of this logger.\n * @return {goog.debug.Logger} The parent logger or null if this is the root.\n */\ngoog.debug.Logger.prototype.getParent = function() {\n  return this.parent_;\n};\n\n\n/**\n * Returns the children of this logger as a map of the child name to the logger.\n * @return {!Object} The map where the keys are the child leaf names and the\n *     values are the Logger objects.\n */\ngoog.debug.Logger.prototype.getChildren = function() {\n  if (!this.children_) {\n    this.children_ = {};\n  }\n  return this.children_;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the new level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @param {goog.debug.Logger.Level} level The new level.\n */\ngoog.debug.Logger.prototype.setLevel = function(level) {\n  if (goog.debug.LOGGING_ENABLED) {\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\n      this.level_ = level;\n    } else {\n      goog.asserts.assert(\n          !this.name_, 'Cannot call setLevel() on a non-root logger when ' +\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n      goog.debug.Logger.rootLevel_ = level;\n    }\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getLevel = function() {\n  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors' levels.\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getEffectiveLevel = function() {\n  if (!goog.debug.LOGGING_ENABLED) {\n    return goog.debug.Logger.Level.OFF;\n  }\n\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\n    return goog.debug.Logger.rootLevel_;\n  }\n  if (this.level_) {\n    return this.level_;\n  }\n  if (this.parent_) {\n    return this.parent_.getEffectiveLevel();\n  }\n  goog.asserts.fail('Root logger has no level set.');\n  return null;\n};\n\n\n/**\n * Checks if a message of the given level would actually be logged by this\n * logger. This check is based on the Loggers effective level, which may be\n * inherited from its parent.\n * @param {goog.debug.Logger.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.debug.Logger.prototype.isLoggable = function(level) {\n  return goog.debug.LOGGING_ENABLED &&\n      level.value >= this.getEffectiveLevel().value;\n};\n\n\n/**\n * Logs a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n */\ngoog.debug.Logger.prototype.log = function(level, msg, opt_exception) {\n  // java caches the effective level, not sure it's necessary here\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {\n    // Message callbacks can be useful when a log message is expensive to build.\n    if (goog.isFunction(msg)) {\n      msg = msg();\n    }\n\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\n  }\n};\n\n\n/**\n * Creates a new log record and adds the exception (if present) to it.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n * @return {!goog.debug.LogRecord} A log record.\n * @suppress {es5Strict}\n */\ngoog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\n    var logRecord =\n        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\n  } else {\n    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);\n  }\n  if (opt_exception) {\n    logRecord.setException(opt_exception);\n  }\n  return logRecord;\n};\n\n\n/**\n * Logs a message at the Logger.Level.SHOUT level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.shout = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.severe = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.warning = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.info = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.CONFIG level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.config = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.fine = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINER level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finer = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a message at the Logger.Level.FINEST level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {goog.debug.Loggable} msg The message to log.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finest = function(msg, opt_exception) {\n  if (goog.debug.LOGGING_ENABLED) {\n    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n  }\n};\n\n\n/**\n * Logs a LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n */\ngoog.debug.Logger.prototype.logRecord = function(logRecord) {\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {\n    this.doLogRecord_(logRecord);\n  }\n};\n\n\n/**\n * Logs a LogRecord.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n * @private\n */\ngoog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\n    goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());\n  }\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var target = this;\n    while (target) {\n      target.callPublish_(logRecord);\n      target = target.getParent();\n    }\n  } else {\n    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++];) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Calls the handlers for publish.\n * @param {goog.debug.LogRecord} logRecord The log record to publish.\n * @private\n */\ngoog.debug.Logger.prototype.callPublish_ = function(logRecord) {\n  if (this.handlers_) {\n    for (var i = 0, handler; handler = this.handlers_[i]; i++) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Sets the parent of this logger. This is used for setting up the logger tree.\n * @param {goog.debug.Logger} parent The parent logger.\n * @private\n */\ngoog.debug.Logger.prototype.setParent_ = function(parent) {\n  this.parent_ = parent;\n};\n\n\n/**\n * Adds a child to this logger. This is used for setting up the logger tree.\n * @param {string} name The leaf name of the child.\n * @param {goog.debug.Logger} logger The child logger.\n * @private\n */\ngoog.debug.Logger.prototype.addChild_ = function(name, logger) {\n  this.getChildren()[name] = logger;\n};\n\n\n/**\n * There is a single global LogManager object that is used to maintain a set of\n * shared state about Loggers and log services. This is loosely based on the\n * java class java.util.logging.LogManager.\n * @const\n */\ngoog.debug.LogManager = {};\n\n\n/**\n * Map of logger names to logger objects.\n *\n * @type {!Object<string, !goog.debug.Logger>}\n * @private\n */\ngoog.debug.LogManager.loggers_ = {};\n\n\n/**\n * The root logger which is the root of the logger tree.\n * @type {?goog.debug.Logger}\n * @private\n */\ngoog.debug.LogManager.rootLogger_ = null;\n\n\n/**\n * Initializes the LogManager if not already initialized.\n */\ngoog.debug.LogManager.initialize = function() {\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ =\n        new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =\n        goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\n\n\n/**\n * Returns all the loggers.\n * @return {!Object<string, !goog.debug.Logger>} Map of logger names to logger\n *     objects.\n */\ngoog.debug.LogManager.getLoggers = function() {\n  return goog.debug.LogManager.loggers_;\n};\n\n\n/**\n * Returns the root of the logger tree namespace, the logger with the empty\n * string as its name.\n *\n * @return {!goog.debug.Logger} The root logger.\n */\ngoog.debug.LogManager.getRoot = function() {\n  goog.debug.LogManager.initialize();\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\n};\n\n\n/**\n * Finds a named logger.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.LogManager.getLogger = function(name) {\n  goog.debug.LogManager.initialize();\n  var ret = goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\n\n\n/**\n * Creates a function that can be passed to goog.debug.catchErrors. The function\n * will log all reported errors using the given logger.\n * @param {goog.debug.Logger=} opt_logger The logger to log the errors to.\n *     Defaults to the root logger.\n * @return {function(Object)} The created function.\n */\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\n  return function(info) {\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\n    logger.severe(\n        'Error: ' + info.message + ' (' + info.fileName + ' @ Line: ' +\n        info.line + ')');\n  };\n};\n\n\n/**\n * Creates the named logger. Will also create the parents of the named logger\n * if they don't yet exist.\n * @param {string} name The name of the logger.\n * @return {!goog.debug.Logger} The named logger.\n * @private\n */\ngoog.debug.LogManager.createLogger_ = function(name) {\n  // find parent logger\n  var logger = new goog.debug.Logger(name);\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var lastDotIndex = name.lastIndexOf('.');\n    var parentName = name.substr(0, lastDotIndex);\n    var leafName = name.substr(lastDotIndex + 1);\n    var parentLogger = goog.debug.LogManager.getLogger(parentName);\n\n    // tell the parent about the child and the child about the parent\n    parentLogger.addChild_(leafName, logger);\n    logger.setParent_(parentLogger);\n  }\n\n  goog.debug.LogManager.loggers_[name] = logger;\n  return logger;\n};\n","~:compiled-at",1626505468005,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.debug.logger.js\",\n\"lineCount\":287,\n\"mappings\":\"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\",\n\"sources\":[\"goog/debug/logger.js\"],\n\"sourcesContent\":[\"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview Definition of the Logger class. Please minimize dependencies\\n * this file has on other closure classes as any dependency it takes won't be\\n * able to use the logging infrastructure.\\n *\\n * @see ../demos/debug.html\\n */\\n\\ngoog.provide('goog.debug.LogManager');\\ngoog.provide('goog.debug.Loggable');\\ngoog.provide('goog.debug.Logger');\\ngoog.provide('goog.debug.Logger.Level');\\n\\ngoog.require('goog.array');\\ngoog.require('goog.asserts');\\ngoog.require('goog.debug');\\ngoog.require('goog.debug.LogBuffer');\\ngoog.require('goog.debug.LogRecord');\\n\\n\\n/**\\n * A message value that can be handled by a Logger.\\n *\\n * Functions are treated like callbacks, but are only called when the event's\\n * log level is enabled. This is useful for logging messages that are expensive\\n * to construct.\\n *\\n * @typedef {string|function(): string}\\n */\\ngoog.debug.Loggable;\\n\\n\\n\\n/**\\n * The Logger is an object used for logging debug messages. Loggers are\\n * normally named, using a hierarchical dot-separated namespace. Logger names\\n * can be arbitrary strings, but they should normally be based on the package\\n * name or class name of the logged component, such as goog.net.BrowserChannel.\\n *\\n * The Logger object is loosely based on the java class\\n * java.util.logging.Logger. It supports different levels of filtering for\\n * different loggers.\\n *\\n * The logger object should never be instantiated by application code. It\\n * should always use the goog.debug.Logger.getLogger function.\\n *\\n * @constructor\\n * @param {string} name The name of the Logger.\\n * @final\\n */\\ngoog.debug.Logger = function(name) {\\n  /**\\n   * Name of the Logger. Generally a dot-separated namespace\\n   * @private {string}\\n   */\\n  this.name_ = name;\\n\\n  /**\\n   * Parent Logger.\\n   * @private {?goog.debug.Logger}\\n   */\\n  this.parent_ = null;\\n\\n  /**\\n   * Level that this logger only filters above. Null indicates it should\\n   * inherit from the parent.\\n   * @private {?goog.debug.Logger.Level}\\n   */\\n  this.level_ = null;\\n\\n  /**\\n   * Map of children loggers. The keys are the leaf names of the children and\\n   * the values are the child loggers.\\n   * @private {?Object}\\n   */\\n  this.children_ = null;\\n\\n  /**\\n   * Handlers that are listening to this logger.\\n   * @private {?Array<?Function>}\\n   */\\n  this.handlers_ = null;\\n};\\n\\n\\n/** @const */\\ngoog.debug.Logger.ROOT_LOGGER_NAME = '';\\n\\n\\n/**\\n * @define {boolean} Toggles whether loggers other than the root logger can have\\n *     log handlers attached to them and whether they can have their log level\\n *     set. Logging is a bit faster when this is set to false.\\n */\\ngoog.debug.Logger.ENABLE_HIERARCHY =\\n    goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);\\n\\n\\n/**\\n * @define {boolean} Toggles whether active log statements are also recorded\\n *     to the profiler.\\n */\\ngoog.debug.Logger.ENABLE_PROFILER_LOGGING =\\n    goog.define('goog.debug.Logger.ENABLE_PROFILER_LOGGING', false);\\n\\n\\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\\n  /**\\n   * @type {!Array<Function>}\\n   * @private\\n   */\\n  goog.debug.Logger.rootHandlers_ = [];\\n\\n\\n  /**\\n   * @type {goog.debug.Logger.Level}\\n   * @private\\n   */\\n  goog.debug.Logger.rootLevel_;\\n}\\n\\n\\n\\n/**\\n * The Level class defines a set of standard logging levels that\\n * can be used to control logging output.  The logging Level objects\\n * are ordered and are specified by ordered integers.  Enabling logging\\n * at a given level also enables logging at all higher levels.\\n * <p>\\n * Clients should normally use the predefined Level constants such\\n * as Level.SEVERE.\\n * <p>\\n * The levels in descending order are:\\n * <ul>\\n * <li>SEVERE (highest value)\\n * <li>WARNING\\n * <li>INFO\\n * <li>CONFIG\\n * <li>FINE\\n * <li>FINER\\n * <li>FINEST  (lowest value)\\n * </ul>\\n * In addition there is a level OFF that can be used to turn\\n * off logging, and a level ALL that can be used to enable\\n * logging of all messages.\\n *\\n * @param {string} name The name of the level.\\n * @param {number} value The numeric value of the level.\\n * @constructor\\n * @final\\n */\\ngoog.debug.Logger.Level = function(name, value) {\\n  /**\\n   * The name of the level\\n   * @type {string}\\n   */\\n  this.name = name;\\n\\n  /**\\n   * The numeric value of the level\\n   * @type {number}\\n   */\\n  this.value = value;\\n};\\n\\n\\n/**\\n * @return {string} String representation of the logger level.\\n * @override\\n */\\ngoog.debug.Logger.Level.prototype.toString = function() {\\n  return this.name;\\n};\\n\\n\\n/**\\n * OFF is a special level that can be used to turn off logging.\\n * This level is initialized to <CODE>Infinity</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.OFF = new goog.debug.Logger.Level('OFF', Infinity);\\n\\n\\n/**\\n * SHOUT is a message level for extra debugging loudness.\\n * This level is initialized to <CODE>1200</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);\\n\\n\\n/**\\n * SEVERE is a message level indicating a serious failure.\\n * This level is initialized to <CODE>1000</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);\\n\\n\\n/**\\n * WARNING is a message level indicating a potential problem.\\n * This level is initialized to <CODE>900</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);\\n\\n\\n/**\\n * INFO is a message level for informational messages.\\n * This level is initialized to <CODE>800</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);\\n\\n\\n/**\\n * CONFIG is a message level for static configuration messages.\\n * This level is initialized to <CODE>700</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);\\n\\n\\n/**\\n * FINE is a message level providing tracing information.\\n * This level is initialized to <CODE>500</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);\\n\\n\\n/**\\n * FINER indicates a fairly detailed tracing message.\\n * This level is initialized to <CODE>400</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);\\n\\n/**\\n * FINEST indicates a highly detailed tracing message.\\n * This level is initialized to <CODE>300</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\n\\ngoog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);\\n\\n\\n/**\\n * ALL indicates that all messages should be logged.\\n * This level is initialized to <CODE>0</CODE>.\\n * @type {!goog.debug.Logger.Level}\\n */\\ngoog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);\\n\\n\\n/**\\n * The predefined levels.\\n * @type {!Array<!goog.debug.Logger.Level>}\\n * @final\\n */\\ngoog.debug.Logger.Level.PREDEFINED_LEVELS = [\\n  goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT,\\n  goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING,\\n  goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG,\\n  goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER,\\n  goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL\\n];\\n\\n\\n/**\\n * A lookup map used to find the level object based on the name or value of\\n * the level object.\\n * @type {?Object}\\n * @private\\n */\\ngoog.debug.Logger.Level.predefinedLevelsCache_ = null;\\n\\n\\n/**\\n * Creates the predefined levels cache and populates it.\\n * @private\\n */\\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {\\n  goog.debug.Logger.Level.predefinedLevelsCache_ = {};\\n  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\\n       i++) {\\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;\\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;\\n  }\\n};\\n\\n\\n/**\\n * Gets the predefined level with the given name.\\n * @param {string} name The name of the level.\\n * @return {goog.debug.Logger.Level} The level, or null if none found.\\n */\\ngoog.debug.Logger.Level.getPredefinedLevel = function(name) {\\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\\n  }\\n\\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\\n};\\n\\n\\n/**\\n * Gets the highest predefined level <= #value.\\n * @param {number} value Level value.\\n * @return {goog.debug.Logger.Level} The level, or null if none found.\\n */\\ngoog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {\\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\\n  }\\n\\n  if (value in /** @type {!Object} */ (\\n          goog.debug.Logger.Level.predefinedLevelsCache_)) {\\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\\n  }\\n\\n  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\\n    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\\n    if (level.value <= value) {\\n      return level;\\n    }\\n  }\\n  return null;\\n};\\n\\n\\n/**\\n * Finds or creates a logger for a named subsystem. If a logger has already been\\n * created with the given name it is returned. Otherwise a new logger is\\n * created. If a new logger is created its log level will be configured based\\n * on the LogManager configuration and it will configured to also send logging\\n * output to its parent's handlers. It will be registered in the LogManager\\n * global namespace.\\n *\\n * @param {string} name A name for the logger. This should be a dot-separated\\n * name and should normally be based on the package name or class name of the\\n * subsystem, such as goog.net.BrowserChannel.\\n * @return {!goog.debug.Logger} The named logger.\\n * @deprecated use {@link goog.log} instead.\\n */\\ngoog.debug.Logger.getLogger = function(name) {\\n  return goog.debug.LogManager.getLogger(name);\\n};\\n\\n\\n/**\\n * Logs a message to profiling tools, if available.\\n * {@see https://developers.google.com/web-toolkit/speedtracer/logging-api}\\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\\n * @param {string} msg The message to log.\\n */\\ngoog.debug.Logger.logToProfilers = function(msg) {\\n  // Some browsers also log timeStamp calls to the console, only log\\n  // if actually asked.\\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\\n    var msWriteProfilerMark = goog.global['msWriteProfilerMark'];\\n    if (msWriteProfilerMark) {\\n      // Logs a message to the Microsoft profiler\\n      // On IE, console['timeStamp'] may output to console\\n      msWriteProfilerMark(msg);\\n      return;\\n    }\\n\\n    // Using goog.global, as loggers might be used in window-less contexts.\\n    var console = goog.global['console'];\\n    if (console && console['timeStamp']) {\\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\\n      console['timeStamp'](msg);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Gets the name of this logger.\\n * @return {string} The name of this logger.\\n */\\ngoog.debug.Logger.prototype.getName = function() {\\n  return this.name_;\\n};\\n\\n\\n/**\\n * Adds a handler to the logger. This doesn't use the event system because\\n * we want to be able to add logging to the event system.\\n * @param {Function} handler Handler function to add.\\n */\\ngoog.debug.Logger.prototype.addHandler = function(handler) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\\n      if (!this.handlers_) {\\n        this.handlers_ = [];\\n      }\\n      this.handlers_.push(handler);\\n    } else {\\n      goog.asserts.assert(\\n          !this.name_, 'Cannot call addHandler on a non-root logger when ' +\\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\\n      goog.debug.Logger.rootHandlers_.push(handler);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Removes a handler from the logger. This doesn't use the event system because\\n * we want to be able to add logging to the event system.\\n * @param {Function} handler Handler function to remove.\\n * @return {boolean} Whether the handler was removed.\\n */\\ngoog.debug.Logger.prototype.removeHandler = function(handler) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ?\\n        this.handlers_ :\\n        goog.debug.Logger.rootHandlers_;\\n    return !!handlers && goog.array.remove(handlers, handler);\\n  } else {\\n    return false;\\n  }\\n};\\n\\n\\n/**\\n * Returns the parent of this logger.\\n * @return {goog.debug.Logger} The parent logger or null if this is the root.\\n */\\ngoog.debug.Logger.prototype.getParent = function() {\\n  return this.parent_;\\n};\\n\\n\\n/**\\n * Returns the children of this logger as a map of the child name to the logger.\\n * @return {!Object} The map where the keys are the child leaf names and the\\n *     values are the Logger objects.\\n */\\ngoog.debug.Logger.prototype.getChildren = function() {\\n  if (!this.children_) {\\n    this.children_ = {};\\n  }\\n  return this.children_;\\n};\\n\\n\\n/**\\n * Set the log level specifying which message levels will be logged by this\\n * logger. Message levels lower than this value will be discarded.\\n * The level value Level.OFF can be used to turn off logging. If the new level\\n * is null, it means that this node should inherit its level from its nearest\\n * ancestor with a specific (non-null) level value.\\n *\\n * @param {goog.debug.Logger.Level} level The new level.\\n */\\ngoog.debug.Logger.prototype.setLevel = function(level) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    if (goog.debug.Logger.ENABLE_HIERARCHY) {\\n      this.level_ = level;\\n    } else {\\n      goog.asserts.assert(\\n          !this.name_, 'Cannot call setLevel() on a non-root logger when ' +\\n              'goog.debug.Logger.ENABLE_HIERARCHY is false.');\\n      goog.debug.Logger.rootLevel_ = level;\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Gets the log level specifying which message levels will be logged by this\\n * logger. Message levels lower than this value will be discarded.\\n * The level value Level.OFF can be used to turn off logging. If the level\\n * is null, it means that this node should inherit its level from its nearest\\n * ancestor with a specific (non-null) level value.\\n *\\n * @return {goog.debug.Logger.Level} The level.\\n */\\ngoog.debug.Logger.prototype.getLevel = function() {\\n  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;\\n};\\n\\n\\n/**\\n * Returns the effective level of the logger based on its ancestors' levels.\\n * @return {goog.debug.Logger.Level} The level.\\n */\\ngoog.debug.Logger.prototype.getEffectiveLevel = function() {\\n  if (!goog.debug.LOGGING_ENABLED) {\\n    return goog.debug.Logger.Level.OFF;\\n  }\\n\\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\\n    return goog.debug.Logger.rootLevel_;\\n  }\\n  if (this.level_) {\\n    return this.level_;\\n  }\\n  if (this.parent_) {\\n    return this.parent_.getEffectiveLevel();\\n  }\\n  goog.asserts.fail('Root logger has no level set.');\\n  return null;\\n};\\n\\n\\n/**\\n * Checks if a message of the given level would actually be logged by this\\n * logger. This check is based on the Loggers effective level, which may be\\n * inherited from its parent.\\n * @param {goog.debug.Logger.Level} level The level to check.\\n * @return {boolean} Whether the message would be logged.\\n */\\ngoog.debug.Logger.prototype.isLoggable = function(level) {\\n  return goog.debug.LOGGING_ENABLED &&\\n      level.value >= this.getEffectiveLevel().value;\\n};\\n\\n\\n/**\\n * Logs a message. If the logger is currently enabled for the\\n * given message level then the given message is forwarded to all the\\n * registered output Handler objects.\\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error|Object=} opt_exception An exception associated with the\\n *     message.\\n */\\ngoog.debug.Logger.prototype.log = function(level, msg, opt_exception) {\\n  // java caches the effective level, not sure it's necessary here\\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {\\n    // Message callbacks can be useful when a log message is expensive to build.\\n    if (goog.isFunction(msg)) {\\n      msg = msg();\\n    }\\n\\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\\n  }\\n};\\n\\n\\n/**\\n * Creates a new log record and adds the exception (if present) to it.\\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\\n * @param {string} msg The string message.\\n * @param {Error|Object=} opt_exception An exception associated with the\\n *     message.\\n * @return {!goog.debug.LogRecord} A log record.\\n * @suppress {es5Strict}\\n */\\ngoog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {\\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\\n    var logRecord =\\n        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\\n  } else {\\n    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);\\n  }\\n  if (opt_exception) {\\n    logRecord.setException(opt_exception);\\n  }\\n  return logRecord;\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.SHOUT level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.shout = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.SEVERE level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.severe = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.WARNING level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.warning = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.INFO level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.info = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.CONFIG level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.config = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.FINE level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.fine = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.FINER level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.finer = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a message at the Logger.Level.FINEST level.\\n * If the logger is currently enabled for the given message level then the\\n * given message is forwarded to all the registered output Handler objects.\\n * @param {goog.debug.Loggable} msg The message to log.\\n * @param {Error=} opt_exception An exception associated with the message.\\n */\\ngoog.debug.Logger.prototype.finest = function(msg, opt_exception) {\\n  if (goog.debug.LOGGING_ENABLED) {\\n    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\\n  }\\n};\\n\\n\\n/**\\n * Logs a LogRecord. If the logger is currently enabled for the\\n * given message level then the given message is forwarded to all the\\n * registered output Handler objects.\\n * @param {goog.debug.LogRecord} logRecord A log record to log.\\n */\\ngoog.debug.Logger.prototype.logRecord = function(logRecord) {\\n  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {\\n    this.doLogRecord_(logRecord);\\n  }\\n};\\n\\n\\n/**\\n * Logs a LogRecord.\\n * @param {goog.debug.LogRecord} logRecord A log record to log.\\n * @private\\n */\\ngoog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {\\n  if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {\\n    goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());\\n  }\\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\\n    var target = this;\\n    while (target) {\\n      target.callPublish_(logRecord);\\n      target = target.getParent();\\n    }\\n  } else {\\n    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++];) {\\n      handler(logRecord);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Calls the handlers for publish.\\n * @param {goog.debug.LogRecord} logRecord The log record to publish.\\n * @private\\n */\\ngoog.debug.Logger.prototype.callPublish_ = function(logRecord) {\\n  if (this.handlers_) {\\n    for (var i = 0, handler; handler = this.handlers_[i]; i++) {\\n      handler(logRecord);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Sets the parent of this logger. This is used for setting up the logger tree.\\n * @param {goog.debug.Logger} parent The parent logger.\\n * @private\\n */\\ngoog.debug.Logger.prototype.setParent_ = function(parent) {\\n  this.parent_ = parent;\\n};\\n\\n\\n/**\\n * Adds a child to this logger. This is used for setting up the logger tree.\\n * @param {string} name The leaf name of the child.\\n * @param {goog.debug.Logger} logger The child logger.\\n * @private\\n */\\ngoog.debug.Logger.prototype.addChild_ = function(name, logger) {\\n  this.getChildren()[name] = logger;\\n};\\n\\n\\n/**\\n * There is a single global LogManager object that is used to maintain a set of\\n * shared state about Loggers and log services. This is loosely based on the\\n * java class java.util.logging.LogManager.\\n * @const\\n */\\ngoog.debug.LogManager = {};\\n\\n\\n/**\\n * Map of logger names to logger objects.\\n *\\n * @type {!Object<string, !goog.debug.Logger>}\\n * @private\\n */\\ngoog.debug.LogManager.loggers_ = {};\\n\\n\\n/**\\n * The root logger which is the root of the logger tree.\\n * @type {?goog.debug.Logger}\\n * @private\\n */\\ngoog.debug.LogManager.rootLogger_ = null;\\n\\n\\n/**\\n * Initializes the LogManager if not already initialized.\\n */\\ngoog.debug.LogManager.initialize = function() {\\n  if (!goog.debug.LogManager.rootLogger_) {\\n    goog.debug.LogManager.rootLogger_ =\\n        new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);\\n    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =\\n        goog.debug.LogManager.rootLogger_;\\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\\n  }\\n};\\n\\n\\n/**\\n * Returns all the loggers.\\n * @return {!Object<string, !goog.debug.Logger>} Map of logger names to logger\\n *     objects.\\n */\\ngoog.debug.LogManager.getLoggers = function() {\\n  return goog.debug.LogManager.loggers_;\\n};\\n\\n\\n/**\\n * Returns the root of the logger tree namespace, the logger with the empty\\n * string as its name.\\n *\\n * @return {!goog.debug.Logger} The root logger.\\n */\\ngoog.debug.LogManager.getRoot = function() {\\n  goog.debug.LogManager.initialize();\\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\\n};\\n\\n\\n/**\\n * Finds a named logger.\\n *\\n * @param {string} name A name for the logger. This should be a dot-separated\\n * name and should normally be based on the package name or class name of the\\n * subsystem, such as goog.net.BrowserChannel.\\n * @return {!goog.debug.Logger} The named logger.\\n */\\ngoog.debug.LogManager.getLogger = function(name) {\\n  goog.debug.LogManager.initialize();\\n  var ret = goog.debug.LogManager.loggers_[name];\\n  return ret || goog.debug.LogManager.createLogger_(name);\\n};\\n\\n\\n/**\\n * Creates a function that can be passed to goog.debug.catchErrors. The function\\n * will log all reported errors using the given logger.\\n * @param {goog.debug.Logger=} opt_logger The logger to log the errors to.\\n *     Defaults to the root logger.\\n * @return {function(Object)} The created function.\\n */\\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\\n  return function(info) {\\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\\n    logger.severe(\\n        'Error: ' + info.message + ' (' + info.fileName + ' @ Line: ' +\\n        info.line + ')');\\n  };\\n};\\n\\n\\n/**\\n * Creates the named logger. Will also create the parents of the named logger\\n * if they don't yet exist.\\n * @param {string} name The name of the logger.\\n * @return {!goog.debug.Logger} The named logger.\\n * @private\\n */\\ngoog.debug.LogManager.createLogger_ = function(name) {\\n  // find parent logger\\n  var logger = new goog.debug.Logger(name);\\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\\n    var lastDotIndex = name.lastIndexOf('.');\\n    var parentName = name.substr(0, lastDotIndex);\\n    var leafName = name.substr(lastDotIndex + 1);\\n    var parentLogger = goog.debug.LogManager.getLogger(parentName);\\n\\n    // tell the parent about the child and the child about the parent\\n    parentLogger.addChild_(leafName, logger);\\n    logger.setParent_(parentLogger);\\n  }\\n\\n  goog.debug.LogManager.loggers_[name] = logger;\\n  return logger;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"debug\",\"Loggable\",\"Logger\",\"goog.debug.Logger\",\"name\",\"name_\",\"parent_\",\"level_\",\"children_\",\"handlers_\",\"ROOT_LOGGER_NAME\",\"ENABLE_HIERARCHY\",\"define\",\"ENABLE_PROFILER_LOGGING\",\"rootHandlers_\",\"rootLevel_\",\"Level\",\"goog.debug.Logger.Level\",\"value\",\"prototype\",\"toString\",\"goog.debug.Logger.Level.prototype.toString\",\"OFF\",\"Infinity\",\"SHOUT\",\"SEVERE\",\"WARNING\",\"INFO\",\"CONFIG\",\"FINE\",\"FINER\",\"FINEST\",\"ALL\",\"PREDEFINED_LEVELS\",\"predefinedLevelsCache_\",\"createPredefinedLevelsCache_\",\"goog.debug.Logger.Level.createPredefinedLevelsCache_\",\"i\",\"level\",\"getPredefinedLevel\",\"goog.debug.Logger.Level.getPredefinedLevel\",\"getPredefinedLevelByValue\",\"goog.debug.Logger.Level.getPredefinedLevelByValue\",\"length\",\"getLogger\",\"goog.debug.Logger.getLogger\",\"LogManager\",\"logToProfilers\",\"goog.debug.Logger.logToProfilers\",\"msg\",\"msWriteProfilerMark\",\"global\",\"console\",\"getName\",\"goog.debug.Logger.prototype.getName\",\"addHandler\",\"goog.debug.Logger.prototype.addHandler\",\"handler\",\"LOGGING_ENABLED\",\"push\",\"asserts\",\"assert\",\"removeHandler\",\"goog.debug.Logger.prototype.removeHandler\",\"handlers\",\"array\",\"remove\",\"getParent\",\"goog.debug.Logger.prototype.getParent\",\"getChildren\",\"goog.debug.Logger.prototype.getChildren\",\"setLevel\",\"goog.debug.Logger.prototype.setLevel\",\"getLevel\",\"goog.debug.Logger.prototype.getLevel\",\"getEffectiveLevel\",\"goog.debug.Logger.prototype.getEffectiveLevel\",\"fail\",\"isLoggable\",\"goog.debug.Logger.prototype.isLoggable\",\"log\",\"goog.debug.Logger.prototype.log\",\"opt_exception\",\"isFunction\",\"doLogRecord_\",\"getLogRecord\",\"goog.debug.Logger.prototype.getLogRecord\",\"LogBuffer\",\"isBufferingEnabled\",\"logRecord\",\"getInstance\",\"addRecord\",\"LogRecord\",\"String\",\"setException\",\"shout\",\"goog.debug.Logger.prototype.shout\",\"severe\",\"goog.debug.Logger.prototype.severe\",\"warning\",\"goog.debug.Logger.prototype.warning\",\"info\",\"goog.debug.Logger.prototype.info\",\"config\",\"goog.debug.Logger.prototype.config\",\"fine\",\"goog.debug.Logger.prototype.fine\",\"finer\",\"goog.debug.Logger.prototype.finer\",\"finest\",\"goog.debug.Logger.prototype.finest\",\"goog.debug.Logger.prototype.logRecord\",\"goog.debug.Logger.prototype.doLogRecord_\",\"getMessage\",\"target\",\"callPublish_\",\"goog.debug.Logger.prototype.callPublish_\",\"setParent_\",\"goog.debug.Logger.prototype.setParent_\",\"parent\",\"addChild_\",\"goog.debug.Logger.prototype.addChild_\",\"logger\",\"loggers_\",\"rootLogger_\",\"initialize\",\"goog.debug.LogManager.initialize\",\"getLoggers\",\"goog.debug.LogManager.getLoggers\",\"getRoot\",\"goog.debug.LogManager.getRoot\",\"goog.debug.LogManager.getLogger\",\"ret\",\"createLogger_\",\"createFunctionForCatchErrors\",\"goog.debug.LogManager.createFunctionForCatchErrors\",\"opt_logger\",\"message\",\"fileName\",\"line\",\"goog.debug.LogManager.createLogger_\",\"lastDotIndex\",\"lastIndexOf\",\"parentName\",\"substr\",\"leafName\",\"parentLogger\"]\n}\n"]